{
  "total_files": 42,
  "content_duplicates": {
    "count": 0,
    "groups": {}
  },
  "similar_names": {
    "count": 8,
    "groups": [
      [
        {
          "path": "./backup_js/algorithms.service.js",
          "size": 12600,
          "lines": 448,
          "hash": "4feeedb3e0e7d74bcb3db3c85b9f3569",
          "functions": [
            "export function showAlgorithmModal",
            "setTimeout",
            "createAlgorithmModal",
            "export function closeAlgorithmModal",
            "export function selectModalAlgorithm",
            "document.querySelectorAll",
            "updateAlgorithmDetails",
            "formatParamName",
            "export async function confirmAlgorithmSelection",
            "Object.keys",
            "} catch",
            "export async function saveAlgorithmConfig",
            "api",
            "} catch",
            "export async function loadAlgorithmConfig",
            "const config = await apiWithFallback",
            "} catch",
            "updateAlgorithmDisplay",
            "export async function calculateNextInterval",
            "api",
            "body: JSON.stringify",
            "} catch",
            "calculateSimpleInterval",
            "} else if",
            "export async function getAlgorithmStats",
            "const stats = await apiWithFallback",
            "} catch"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { apiWithFallback, performCrudOperation } from './utils/apiHelpers.js';",
            "import { showNotification } from './utils/helpers.js';"
          ],
          "exports": [
            "export function showAlgorithmModal() {",
            "export function closeAlgorithmModal() {",
            "export function selectModalAlgorithm(algorithmId) {",
            "export async function confirmAlgorithmSelection() {",
            "export async function saveAlgorithmConfig(algorithmId, params) {",
            "export async function loadAlgorithmConfig() {",
            "export async function calculateNextInterval(cardData, quality) {",
            "export async function getAlgorithmStats() {"
          ]
        },
        {
          "path": "./backup_js/auth.service.js",
          "size": 4040,
          "lines": 161,
          "hash": "fe60f6442a32e099ead761fe35ebd928",
          "functions": [
            "export async function checkAuthStatus",
            "} catch",
            "export async function login",
            "api",
            "} catch",
            "export async function register",
            "api",
            "} catch",
            "export function logout",
            "clearAuthData",
            "export function getAuthToken",
            "export function isAuthenticated",
            "export function getCurrentUser"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { loadDashboardData } from './dashboard.service.js';",
            "import {",
            "import { performCrudOperation } from './utils/apiHelpers.js';",
            "import { showNotification } from './utils/helpers.js';"
          ],
          "exports": [
            "export async function checkAuthStatus() {",
            "export async function login(email, password) {",
            "export async function register(email, password, confirmPassword, name = '') {",
            "export function logout() {",
            "export function getAuthToken() {",
            "export function isAuthenticated() {",
            "export function getCurrentUser() {"
          ]
        }
      ],
      [
        {
          "path": "./backup_js/create.service.js",
          "size": 11096,
          "lines": 377,
          "hash": "84da86ecd1cda24800cfb74d5491f763",
          "functions": [
            "export async function loadDecksForCreation",
            "} catch",
            "export function openCreateDeckModal",
            "export async function createDeck",
            "const newDeck = stateManager.addDeck",
            "[nameInput, descriptionInput].forEach",
            "} catch",
            "export async function loadDecksForCreation",
            "} catch",
            "export async function createFlashcard",
            "const newFlashcard = stateManager.addFlashcard",
            "} catch",
            "export async function createBulkFlashcards",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export async function importFlashcards",
            "fetch",
            "} catch",
            "export function initializeCreateEvents",
            "createDeckBtn.addEventListener",
            "importBtn.addEventListener"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import stateManager from './state-manager.js';",
            "import storageService from './storage.service.js';",
            "import { validateDeckData, validateFlashcardData } from './utils/validation.js';",
            "import {",
            "import {",
            "import {",
            "import { FlashcardFormUtils, DeckFormUtils } from './utils/formValidation.js';",
            "import { FlashcardNotifications, DeckNotifications } from './utils/notifications.js';"
          ],
          "exports": [
            "export async function loadDecksForCreation() {",
            "export function openCreateDeckModal() {",
            "export async function createDeck(deckData = {}) {",
            "export async function loadDecksForCreation() {",
            "export async function createFlashcard() {",
            "export async function createBulkFlashcards(flashcardsData, deckId) {",
            "export async function importFlashcards(file, deckId) {",
            "export function initializeCreateEvents() {"
          ]
        },
        {
          "path": "./backup_js/manage.service.js",
          "size": 12342,
          "lines": 432,
          "hash": "1eec0ac603f5a61ac5412d17a0e61a52",
          "functions": [
            "export async function loadManageDecks",
            "} catch",
            "} catch",
            "renderManageDecks",
            "export async function deleteDeck",
            "} catch",
            "export async function editDeck",
            "} catch",
            "showEditDeckForm",
            "createEditDeckModal",
            "export async function updateDeck",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export function closeEditDeckModal",
            "export async function loadDeckFlashcards",
            "} catch",
            "renderDeckFlashcards",
            "export async function exportDeck",
            "const blob = new Blob",
            "} catch",
            "export async function loadManageData"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { validateDeckData } from './utils/validation.js';",
            "import {",
            "import {"
          ],
          "exports": [
            "export async function loadManageDecks() {",
            "export async function deleteDeck(id) {",
            "export async function editDeck(deckId) {",
            "export async function updateDeck(deckId) {",
            "export function closeEditDeckModal() {",
            "export async function loadDeckFlashcards(deckId) {",
            "export async function exportDeck(deckId) {",
            "export async function loadManageData() {"
          ]
        },
        {
          "path": "./backup_js/storage.service.js",
          "size": 21702,
          "lines": 811,
          "hash": "8404b8cec9c1f840150fbcc5f1503676",
          "functions": [
            "constructor",
            "checkStorageAvailability",
            "} catch",
            "initializeStorage",
            "migrateStorage",
            "} catch",
            "cleanExpiredData",
            "keysToRemove.forEach",
            "save",
            "} catch",
            "load",
            "} catch",
            "remove",
            "} catch",
            "freeUpSpace",
            "getDecks",
            "getDeck",
            "deck",
            "createDeck",
            "this.addToPendingSync",
            "updateDeck",
            "deckIndex",
            "deleteDeck",
            "deckIndex",
            "getFlashcards",
            "getFlashcardsByDeck",
            "createFlashcard",
            "this.addToPendingSync",
            "updateFlashcard",
            "cardIndex",
            "deleteFlashcard",
            "cardIndex",
            "deleteFlashcardsByDeck",
            "filteredCards",
            "updateDeckCardCount",
            "exportAllData",
            "importData",
            "} catch",
            "clearAllData",
            "} catch",
            "getStorageInfo",
            "addToPendingSync",
            "exists",
            "} catch",
            "getPendingSync",
            "removeFromPendingSync",
            "filteredItems",
            "} catch",
            "clearPendingSync",
            "} catch",
            "getPendingSyncStats"
          ],
          "imports": [
            "import { validateDeckData, validateFlashcardData } from './utils/validation.js';",
            "import { showNotification, generateId } from './utils/helpers.js';"
          ],
          "exports": [
            "export const {",
            "export default storageService;"
          ]
        }
      ],
      [
        {
          "path": "./backup_js/dashboard.service.js",
          "size": 10499,
          "lines": 388,
          "hash": "cb769d2ea563dfbfa7abbeb4c675435d",
          "functions": [
            "export async function loadDashboardData",
            "} catch",
            "export async function loadUserStats",
            "} catch",
            "export async function loadUserDecks",
            "} catch",
            "export async function loadWeeklyStats",
            "const weeklyStats = await apiWithFallback",
            "} catch",
            "updateDashboardStats",
            "Object.entries",
            "updateAdditionalStats",
            "updateDashboardDecks",
            "initializeChartsWithData",
            "} catch",
            "async function loadAndUpdateActivityHeatmap",
            "} catch",
            "generateMockActivityData",
            "data.push",
            "export async function updateDashboardPeriod",
            "} catch",
            "export async function refreshDashboard",
            "} catch"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import stateManager from './state-manager.js';",
            "import {",
            "import {",
            "import {",
            "import {"
          ],
          "exports": [
            "export async function loadDashboardData() {",
            "export async function loadUserStats() {",
            "export async function loadUserDecks() {",
            "export async function loadWeeklyStats() {",
            "export async function updateDashboardPeriod(period) {",
            "export async function refreshDashboard() {"
          ]
        },
        {
          "path": "./backup_js/flashcards.service.js",
          "size": 6578,
          "lines": 252,
          "hash": "2efdb51d5b9878fd33f4c6313b2d3b17",
          "functions": [
            "export async function createFlashcard",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export async function editFlashcard",
            "} catch",
            "export async function updateFlashcard",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export async function deleteFlashcard",
            "api",
            "} catch",
            "export async function loadFlashcardsByDeck",
            "} catch",
            "export async function loadAllFlashcards",
            "} catch",
            "resetEditMode",
            "export function cancelEdit",
            "export function getEditingFlashcardId"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { validateFlashcardData } from './utils/validation.js';",
            "import {",
            "import {",
            "import { FlashcardFormUtils } from './utils/formValidation.js';",
            "import { FlashcardNotifications } from './utils/notifications.js';"
          ],
          "exports": [
            "export async function createFlashcard() {",
            "export async function editFlashcard(flashcardId) {",
            "export async function updateFlashcard() {",
            "export async function deleteFlashcard(flashcardId) {",
            "export async function loadFlashcardsByDeck(deckId) {",
            "export async function loadAllFlashcards() {",
            "export function cancelEdit() {",
            "export function getEditingFlashcardId() {"
          ]
        }
      ],
      [
        {
          "path": "./backup_js/eslint.config.js",
          "size": 3646,
          "lines": 155,
          "hash": "05e72f5b69bcf66d846e7a8dc7f79f9e",
          "functions": [],
          "imports": [
            "import js from '@eslint/js';",
            "import globals from 'globals';",
            "import cypress from 'eslint-plugin-cypress';"
          ],
          "exports": [
            "export default ["
          ]
        },
        {
          "path": "./backup_js/vitest.config.js",
          "size": 774,
          "lines": 34,
          "hash": "6c804dd2bb06d7b3c2430f1ff348aeb3",
          "functions": [
            "export default defineConfig"
          ],
          "imports": [
            "import { defineConfig } from 'vitest/config';"
          ],
          "exports": [
            "export default defineConfig({"
          ]
        }
      ],
      [
        {
          "path": "./backup_js/gamification.service.js",
          "size": 16970,
          "lines": 661,
          "hash": "57516646c59ac092a46d68331dc1481d",
          "functions": [
            "export async function loadGamificationData",
            "const data = await apiWithFallback",
            "} catch",
            "export function calculatePoints",
            "switch",
            "export function startStudySession",
            "export async function endStudySession",
            "updateStreak",
            "} else if",
            "updateLevel",
            "async function checkAchievements",
            "async function grantAchievement",
            "async function saveGamificationData",
            "api",
            "} catch",
            "updateGamificationUI",
            "updatePointsDisplay",
            "setTimeout",
            "updateLevelProgress",
            "updateAchievementsDisplay",
            ".map",
            "showSessionSummary",
            "triggerLevelUpEffect",
            "setTimeout",
            "triggerAchievementEffect",
            "setTimeout",
            "export function getGamificationStats"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import {",
            "import { showNotification } from './utils/helpers.js';"
          ],
          "exports": [
            "export async function loadGamificationData() {",
            "export function calculatePoints(difficulty, card, responseTime = 0) {",
            "export function startStudySession() {",
            "export async function endStudySession() {",
            "export function getGamificationStats() {"
          ]
        },
        {
          "path": "./services/NavigationService.js",
          "size": 5297,
          "lines": 201,
          "hash": "e880e396db3e70bbbd311d1b66640827",
          "functions": [
            "constructor",
            "init",
            "waitForNavigationSystem",
            "checkNavigation",
            "navigateTo",
            "} catch",
            "processPendingNavigations",
            "while",
            "getCurrentSection",
            "goBack",
            "clearHistory",
            "on",
            "off",
            "emit",
            "this.listeners.get",
            "} catch",
            "isReady",
            "getStats",
            "export navigateTo",
            "export getCurrentSection",
            "export goBack",
            "export onNavigationChange",
            "export onNavigationReady"
          ],
          "imports": [],
          "exports": [
            "export const navigateTo = (sectionId, options) => navigationService.navigateTo(sectionId, options);",
            "export const getCurrentSection = () => navigationService.getCurrentSection();",
            "export const goBack = () => navigationService.goBack();",
            "export const onNavigationChange = (callback) => navigationService.on('navigationChanged', callback);",
            "export const onNavigationReady = (callback) => navigationService.on('navigationReady', callback);",
            "export default navigationService;"
          ]
        }
      ],
      [
        {
          "path": "./backup_js/helpers.js",
          "size": 8685,
          "lines": 353,
          "hash": "3469817c744e8887622ce0bc60167717",
          "functions": [
            "initializeParticles",
            "} catch",
            "autoInitParticles",
            "showSection",
            "document.querySelectorAll",
            "handleGlobalError",
            "async function checkConnectivity",
            "const response = await fetch",
            "getDeviceInfo",
            "tryInitParticles",
            "window.addEventListener",
            "window.addEventListener",
            "window.addEventListener",
            "window.addEventListener"
          ],
          "imports": [
            "import {",
            "import {",
            "import {"
          ],
          "exports": [
            "export {",
            "export {"
          ]
        },
        {
          "path": "./utils/apiHelpers.js",
          "size": 4524,
          "lines": 181,
          "hash": "6c147ad3ede1a6bad49bd65086c63946",
          "functions": [
            "export async function multipleApiWithFallback",
            "} catch",
            "} catch",
            "} catch"
          ],
          "imports": [
            "import { api } from '../apiClient.js';",
            "import { showNotification } from './helpers.js';"
          ],
          "exports": [
            "export async function apiWithFallback(",
            "export async function multipleApiWithFallback(apiCalls) {",
            "export async function performCrudOperation(",
            "export async function loadDataWithRetry(",
            "export const FALLBACK_DATA = {"
          ]
        },
        {
          "path": "./utils/helpers.js",
          "size": 15878,
          "lines": 580,
          "hash": "2a51aed70df321d4355fdbab86b49e1f",
          "functions": [
            "export function debounce",
            "return function executedFunction",
            "later",
            "switch",
            "setTimeout",
            "setTimeout",
            "setTimeout",
            "export function formatDate",
            "return dateObj.toLocaleDateString",
            "export function formatRelativeDate",
            "export function capitalize",
            "export function capitalizeFirst",
            "export function truncateText",
            "export function generateId",
            "export async function copyToClipboard",
            "} catch",
            "export function getVisibleElement",
            "export function clearForm",
            "inputs.forEach",
            "export function renderEmptyState",
            "} else if",
            "export function renderEmptyDecksState",
            "export function renderEmptyFlashcardsState",
            "export function renderEmptyStatsState",
            "export function downloadFile",
            "} catch",
            "export function capitalizeWords",
            "export function sanitizeFilename",
            "export function parseCSV",
            "export function formatFileSize",
            "export function isValidEmail",
            "export function isValidPassword"
          ],
          "imports": [],
          "exports": [
            "export function debounce(func, wait) {",
            "export function showNotification(",
            "export function formatDate(date, locale = 'es-ES') {",
            "export function formatRelativeDate(date) {",
            "export function capitalize(str) {",
            "export function capitalizeFirst(str) {",
            "export function truncateText(text, maxLength, suffix = '...') {",
            "export function generateId() {",
            "export async function copyToClipboard(text) {",
            "export function getVisibleElement(selector) {",
            "export function clearForm(formSelector) {",
            "export function renderEmptyState(container, options = {}) {",
            "export function renderEmptyDecksState(container, options = {}) {",
            "export function renderEmptyFlashcardsState(container, options = {}) {",
            "export function renderEmptySearchState(",
            "export function renderEmptyStatsState(container, options = {}) {",
            "export function downloadFile(content, filename, mimeType = 'text/plain') {",
            "export function capitalizeWords(str) {",
            "export function sanitizeFilename(filename) {",
            "export function parseCSV(csvContent, delimiter = ',') {",
            "export function formatFileSize(bytes) {",
            "export function isValidEmail(email) {",
            "export function isValidPassword(password) {"
          ]
        }
      ],
      [
        {
          "path": "./backup_js/store.js",
          "size": 17611,
          "lines": 772,
          "hash": "a55767334baad711411de654ebabca21",
          "functions": [
            "constructor",
            "getState",
            "setState",
            "} catch",
            "subscribe",
            "return",
            "notifySubscribers",
            "this.subscribers.forEach",
            "} catch",
            "setUser",
            "logout",
            "setDecks",
            "addDeck",
            "updateDeck",
            "deleteDeck",
            "decks",
            "setCurrentDeck",
            "startStudySession",
            "updateStudyProgress",
            "endStudySession",
            "updateSettings",
            "setLoading",
            "setCurrentSection",
            "addError",
            "removeError",
            "addNotification",
            "validateStateUpdate",
            "matchesFilter",
            "deepMerge",
            "addToHistory",
            "this.history.push",
            "saveToLocalStorage",
            "} catch",
            "loadFromLocalStorage",
            "} catch",
            "clearLocalStorage",
            "} catch",
            "setupAutoSave",
            "setInterval",
            "setupConnectivityMonitoring",
            "window.addEventListener",
            "window.addEventListener",
            "log",
            "error",
            "getDebugInfo",
            "export function createSimpleStore",
            "getState",
            "setState",
            "subscribe",
            "return"
          ],
          "imports": [
            "import { generateId } from './utils/helpers.js';",
            "import { validateRequiredFields } from './utils/validation.js';"
          ],
          "exports": [
            "export function createSimpleStore() {",
            "export { store };",
            "export default store;",
            "export { StudyingFlashStore };",
            "export const simpleStore = createSimpleStore();"
          ]
        },
        {
          "path": "./store/store.js",
          "size": 2746,
          "lines": 123,
          "hash": "e051fd153b01e5f8eabdc5d2813c0398",
          "functions": [
            "constructor",
            "this.store.subscribe",
            "getState",
            "setState",
            "subscribe",
            "return",
            "notifyListeners",
            "this.listeners.forEach",
            "} catch",
            "setUser",
            "setDecks",
            "addDeck",
            "updateDeck",
            "deleteDeck"
          ],
          "imports": [
            "import store, { StudyingFlashStore, simpleStore } from '../store.js';",
            "import store from './store.js'"
          ],
          "exports": [
            "export default legacyStore;",
            "export { legacyStore as store };",
            "export { store as mainStore, StudyingFlashStore, simpleStore };"
          ]
        }
      ],
      [
        {
          "path": "./utils/formValidation.js",
          "size": 7006,
          "lines": 235,
          "hash": "8aa4d3170e98da670e065b502bbbfcba",
          "functions": [
            "static validateRequiredFields",
            "static validateFlashcardForm",
            "static validateDeckForm",
            "static getFormData",
            "static getFieldData",
            "static clearForm",
            "static clearFields",
            "selectors.forEach",
            "static getCreateFormData",
            "return FormValidator.getFieldData",
            "static clearCreateForm",
            "static validateAndGetData",
            "static getCreateFormData",
            "return FormValidator.getFieldData",
            "static clearCreateForm",
            "static validateAndGetData"
          ],
          "imports": [],
          "exports": [
            "if (typeof module !== 'undefined' && module.exports) {",
            "module.exports = {"
          ]
        },
        {
          "path": "./utils/validation.js",
          "size": 3664,
          "lines": 144,
          "hash": "d62f6064b734f0fcf9a75870208ce4bc",
          "functions": [
            "emptyFields",
            "export function validateLoginCredentials",
            "export function validateFlashcardData",
            "export function validateDeckData",
            "export function validateEmail",
            "export function validatePassword",
            "export function validateRegistrationData"
          ],
          "imports": [
            "import { showNotification } from './helpers.js';"
          ],
          "exports": [
            "export function validateRequiredFields(",
            "export function validateLoginCredentials(email, password) {",
            "export function validateFlashcardData(deckId, front, back) {",
            "export function validateDeckData(name) {",
            "export function validateEmail(email) {",
            "export function validatePassword(password) {",
            "export function validateRegistrationData(email, password, confirmPassword) {"
          ]
        }
      ]
    ]
  },
  "functional_duplicates": {
    "count": 3,
    "groups": [
      [
        {
          "path": "./backup_js/basic.spec.js",
          "size": 319,
          "lines": 9,
          "hash": "895b24ebd7699ca7688dc31bbb352a95",
          "functions": [
            "describe",
            "it"
          ],
          "imports": [],
          "exports": []
        },
        {
          "path": "./cypress/e2e/app.cy.js",
          "size": 1703,
          "lines": 57,
          "hash": "f4e81e8be4904fce795add72976b79d2",
          "functions": [
            "describe",
            "beforeEach",
            "it",
            "it",
            "it",
            "it",
            "it"
          ],
          "imports": [],
          "exports": []
        }
      ],
      [
        {
          "path": "./backup_js/vite.config.js",
          "size": 1295,
          "lines": 58,
          "hash": "3640a8e24a84c5082f9892cfc8d2a834",
          "functions": [
            "export default defineConfig"
          ],
          "imports": [
            "import { defineConfig } from 'vite';",
            "import { resolve } from 'path';"
          ],
          "exports": [
            "export default defineConfig({"
          ]
        },
        {
          "path": "./backup_js/vitest.config.js",
          "size": 774,
          "lines": 34,
          "hash": "6c804dd2bb06d7b3c2430f1ff348aeb3",
          "functions": [
            "export default defineConfig"
          ],
          "imports": [
            "import { defineConfig } from 'vitest/config';"
          ],
          "exports": [
            "export default defineConfig({"
          ]
        }
      ],
      [
        {
          "path": "./tests/unit/auth.service.test.js",
          "size": 2765,
          "lines": 103,
          "hash": "f5c73f1ec1d7f478451fd84e648ff6e5",
          "functions": [
            "vi.mock",
            "vi.mock",
            "vi.mock",
            "vi.mock",
            "vi.mock",
            "vi.mock",
            "describe",
            "beforeEach",
            "describe",
            "it",
            "it",
            "describe",
            "it",
            "it"
          ],
          "imports": [
            "import { describe, it, expect, vi, beforeEach } from 'vitest';"
          ],
          "exports": []
        },
        {
          "path": "./tests/unit/navigation.test.js",
          "size": 3874,
          "lines": 144,
          "hash": "c3dfc02614186ac04adc1904d578357e",
          "functions": [
            "describe",
            "beforeEach",
            "describe",
            "it",
            "it",
            "it",
            "describe",
            "it",
            "it",
            "describe",
            "it",
            "} catch"
          ],
          "imports": [
            "import { describe, it, expect, vi, beforeEach } from 'vitest';"
          ],
          "exports": []
        }
      ]
    ]
  },
  "all_files": [
    {
      "path": "./flashcard-app-final.js",
      "size": 34282,
      "lines": 1022,
      "hash": "a87c4ed5236571f4ce02f67c60b8a32d",
      "functions": [
        "log:",
        "error:",
        "showNotification:",
        "setTimeout",
        "generateId:",
        "async request",
        "const response = await fetch",
        "} catch",
        "fallbackToLocalStorage",
        "switch",
        "index",
        "filtered",
        "async getAll",
        "async create",
        "const result = await ApiService.request",
        "async update",
        "return await ApiService.request",
        "async delete",
        "const result = await ApiService.request",
        "async getByDeck",
        "async create",
        "const result = await ApiService.request",
        "async update",
        "return await ApiService.request",
        "async delete",
        "return await ApiService.request",
        "calculateNext",
        "} else if",
        "async getFlashcardsForReview",
        "return flashcards.filter",
        "async processAnswer",
        "flashcard",
        "const updatedFlashcard = await FlashcardService.update",
        "async getStats",
        "} catch",
        "calculateAccuracy",
        "reviewed",
        "correct",
        "calculateStreak",
        "calculateStudyTime",
        "async updateDashboard",
        "async loadDecks",
        "async loadDeckOptions",
        "selects.forEach",
        "updateElement",
        "clearForm",
        "async init",
        "} catch",
        "initializeSections",
        "document.querySelectorAll",
        "async loadInitialData",
        "} catch",
        "setupEventListeners",
        "document.addEventListener",
        "async handleCreateDeck",
        "} catch",
        "async handleCreateFlashcard",
        "} catch",
        "async startStudy",
        "} catch",
        "showCurrentFlashcard",
        "async processStudyAnswer",
        "this.currentStudySession.answers.push",
        "} catch",
        "async finishStudySession",
        "Utils.log",
        "navigateToSection",
        "document.querySelectorAll",
        "document.querySelectorAll",
        "async editDeck",
        "async refresh",
        "document.addEventListener",
        "showSection",
        "document.querySelectorAll",
        "document.querySelectorAll",
        "switch",
        "debounce",
        "return function executedFunction",
        "later",
        "generateActivityHeatmap",
        "async function handleCreateDeck",
        "const newDeck = await DeckService.create",
        "} catch",
        "async function handleCreateFlashcard",
        "const newFlashcard = await FlashcardService.create",
        "} catch"
      ],
      "imports": [],
      "exports": []
    },
    {
      "path": "./backup_js/algorithms.service.js",
      "size": 12600,
      "lines": 448,
      "hash": "4feeedb3e0e7d74bcb3db3c85b9f3569",
      "functions": [
        "export function showAlgorithmModal",
        "setTimeout",
        "createAlgorithmModal",
        "export function closeAlgorithmModal",
        "export function selectModalAlgorithm",
        "document.querySelectorAll",
        "updateAlgorithmDetails",
        "formatParamName",
        "export async function confirmAlgorithmSelection",
        "Object.keys",
        "} catch",
        "export async function saveAlgorithmConfig",
        "api",
        "} catch",
        "export async function loadAlgorithmConfig",
        "const config = await apiWithFallback",
        "} catch",
        "updateAlgorithmDisplay",
        "export async function calculateNextInterval",
        "api",
        "body: JSON.stringify",
        "} catch",
        "calculateSimpleInterval",
        "} else if",
        "export async function getAlgorithmStats",
        "const stats = await apiWithFallback",
        "} catch"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import { store } from './store/store.js';",
        "import { apiWithFallback, performCrudOperation } from './utils/apiHelpers.js';",
        "import { showNotification } from './utils/helpers.js';"
      ],
      "exports": [
        "export function showAlgorithmModal() {",
        "export function closeAlgorithmModal() {",
        "export function selectModalAlgorithm(algorithmId) {",
        "export async function confirmAlgorithmSelection() {",
        "export async function saveAlgorithmConfig(algorithmId, params) {",
        "export async function loadAlgorithmConfig() {",
        "export async function calculateNextInterval(cardData, quality) {",
        "export async function getAlgorithmStats() {"
      ]
    },
    {
      "path": "./backup_js/apiClient.js",
      "size": 4723,
      "lines": 200,
      "hash": "f6f70fbabdafd3d2a486deb4155d8259",
      "functions": [
        "static getAuthToken",
        "static setAuthToken",
        "static removeAuthToken",
        "static isAuthenticated",
        "} catch",
        "static getAuthHeaders",
        "static async get",
        "static async post",
        "static async put",
        "static async delete",
        "static async request",
        "} catch",
        "export async function api",
        "} catch",
        "export async function apiWithFallback",
        "} catch"
      ],
      "imports": [],
      "exports": [
        "export class ApiClient {",
        "export async function api(endpoint, options = {}) {",
        "export async function apiWithFallback(endpoint, options = {}) {",
        "export { API_CONFIG };",
        "export default ApiClient;"
      ]
    },
    {
      "path": "./backup_js/auth.service.js",
      "size": 4040,
      "lines": 161,
      "hash": "fe60f6442a32e099ead761fe35ebd928",
      "functions": [
        "export async function checkAuthStatus",
        "} catch",
        "export async function login",
        "api",
        "} catch",
        "export async function register",
        "api",
        "} catch",
        "export function logout",
        "clearAuthData",
        "export function getAuthToken",
        "export function isAuthenticated",
        "export function getCurrentUser"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import { store } from './store/store.js';",
        "import { loadDashboardData } from './dashboard.service.js';",
        "import {",
        "import { performCrudOperation } from './utils/apiHelpers.js';",
        "import { showNotification } from './utils/helpers.js';"
      ],
      "exports": [
        "export async function checkAuthStatus() {",
        "export async function login(email, password) {",
        "export async function register(email, password, confirmPassword, name = '') {",
        "export function logout() {",
        "export function getAuthToken() {",
        "export function isAuthenticated() {",
        "export function getCurrentUser() {"
      ]
    },
    {
      "path": "./backup_js/basic.spec.js",
      "size": 319,
      "lines": 9,
      "hash": "895b24ebd7699ca7688dc31bbb352a95",
      "functions": [
        "describe",
        "it"
      ],
      "imports": [],
      "exports": []
    },
    {
      "path": "./backup_js/bindings.js",
      "size": 17412,
      "lines": 726,
      "hash": "f3d7f41b2b6a32da7a778ce9ec36cdb9",
      "functions": [
        "document.addEventListener",
        "} catch",
        "async function executeAction",
        "switch",
        "async function handleLogin",
        "async function handleRegister",
        "async function handleLogout",
        "async function handleStartStudy",
        "async function handlePauseStudy",
        "async function handleResumeStudy",
        "async function handleSubmitAnswer",
        "async function handleCreateDeck",
        "async function handleCreateFlashcard",
        "async function handleEditDeck",
        "async function handleDeleteDeck",
        "async function handleExportDeck",
        "async function handleNavigate",
        "async function handleToggleTheme",
        "async function handleSaveSettings",
        "async function handleCopyToClipboard",
        "} catch",
        "async function handleDownloadFile",
        "} catch",
        "getFormFromElement",
        "isActionInProgress",
        "markActionAsActive",
        "markActionAsInactive",
        "async function handleConfirmation",
        "setTimeout",
        "getConfirmationMessage",
        "showActionLoading",
        "export function getBindingsState",
        "export function configureBindings"
      ],
      "imports": [
        "import { login, logout, register } from './auth.service.js';",
        "import {",
        "import { createDeck, createFlashcard } from './create.service.js';",
        "import { deleteDeck, editDeck, exportDeck } from './manage.service.js';",
        "import { showNotification } from './utils/helpers.js';",
        "import {"
      ],
      "exports": [
        "export function getBindingsState() {",
        "export function configureBindings(config = {}) {"
      ]
    },
    {
      "path": "./backup_js/charts.js",
      "size": 37927,
      "lines": 1435,
      "hash": "90992b4c5ce8cc93e5cfdeccdde59062",
      "functions": [
        "export async function initializeCharts",
        "} catch",
        "async function loadChartJsLibrary",
        "return new Promise",
        "script.onload =",
        "script.onerror =",
        "configureChartJsDefaults",
        "async function initializeAllCharts",
        "} catch",
        "async function initializeWeeklyProgressChart",
        "const weeklyData = await apiWithFallback",
        "const chart = new Chart",
        "afterLabel: function",
        "} catch",
        "async function initializeCategoryDistributionChart",
        "const chart = new Chart",
        "generateLabels: function",
        "return data.labels.map",
        "total",
        "label: function",
        "total",
        "} catch",
        "async function initializePerformanceChart",
        "const chart = new Chart",
        "callback: function",
        "} catch",
        "async function initializeStudyTimeChart",
        "const studyTimeData = await apiWithFallback",
        "const chart = new Chart",
        "} catch",
        "async function initializeAccuracyTrendChart",
        "const chart = new Chart",
        "} catch",
        "async function initializeDeckProgressChart",
        "const deckData = await apiWithFallback",
        "const chart = new Chart",
        "afterLabel: function",
        "} catch",
        "calculateConsistency",
        "accuracyData.reduce",
        "calculateImprovement",
        "createFallbackCharts",
        "chartElements.forEach",
        "createFallbackChart",
        "export function updateChart",
        "} catch",
        "export function destroyChart",
        "export function destroyAllCharts",
        "chartInstances.forEach",
        "export function updateChartsTheme",
        "chartInstances.forEach",
        "export function getChartsInfo",
        "export async function updateProgressChart",
        "data = await apiWithFallback",
        "} catch",
        "export async function updateAccuracyChart",
        "data = await apiWithFallback",
        "} catch",
        "export async function updateChartPeriod",
        "} catch",
        "generateDateLabels",
        "generateMockProgressData",
        "generateMockAccuracyData",
        "async function createProgressChart",
        "const chart = new Chart",
        "async function createAccuracyChart",
        "const chart = new Chart",
        "updatePeriodButtons",
        "periodButtons.forEach",
        "async function updateStreakChart",
        "return updateChart",
        "} catch",
        "async function updateDeckProgressChart",
        "return updateChart",
        "} catch"
      ],
      "imports": [
        "import { apiWithFallback } from './utils/apiHelpers.js';",
        "import { formatDate } from './utils/helpers.js';"
      ],
      "exports": [
        "export async function initializeCharts(options = {}) {",
        "export function updateChart(chartId, newData) {",
        "export function destroyChart(chartId) {",
        "export function destroyAllCharts() {",
        "export function updateChartsTheme(newTheme) {",
        "export function getChartsInfo() {",
        "export async function updateProgressChart(data = null, period = '7d') {",
        "export async function updateAccuracyChart(data = null, period = '7d') {",
        "export async function updateChartPeriod(period = '7d') {"
      ]
    },
    {
      "path": "./backup_js/create.service.js",
      "size": 11096,
      "lines": 377,
      "hash": "84da86ecd1cda24800cfb74d5491f763",
      "functions": [
        "export async function loadDecksForCreation",
        "} catch",
        "export function openCreateDeckModal",
        "export async function createDeck",
        "const newDeck = stateManager.addDeck",
        "[nameInput, descriptionInput].forEach",
        "} catch",
        "export async function loadDecksForCreation",
        "} catch",
        "export async function createFlashcard",
        "const newFlashcard = stateManager.addFlashcard",
        "} catch",
        "export async function createBulkFlashcards",
        "api",
        "body: JSON.stringify",
        "} catch",
        "export async function importFlashcards",
        "fetch",
        "} catch",
        "export function initializeCreateEvents",
        "createDeckBtn.addEventListener",
        "importBtn.addEventListener"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import stateManager from './state-manager.js';",
        "import storageService from './storage.service.js';",
        "import { validateDeckData, validateFlashcardData } from './utils/validation.js';",
        "import {",
        "import {",
        "import {",
        "import { FlashcardFormUtils, DeckFormUtils } from './utils/formValidation.js';",
        "import { FlashcardNotifications, DeckNotifications } from './utils/notifications.js';"
      ],
      "exports": [
        "export async function loadDecksForCreation() {",
        "export function openCreateDeckModal() {",
        "export async function createDeck(deckData = {}) {",
        "export async function loadDecksForCreation() {",
        "export async function createFlashcard() {",
        "export async function createBulkFlashcards(flashcardsData, deckId) {",
        "export async function importFlashcards(file, deckId) {",
        "export function initializeCreateEvents() {"
      ]
    },
    {
      "path": "./backup_js/cypress.config.js",
      "size": 193,
      "lines": 9,
      "hash": "28f8ee24533c36c549efef6ee19ac91c",
      "functions": [
        "module.exports = defineConfig"
      ],
      "imports": [
        "const { defineConfig } = require('cypress');"
      ],
      "exports": [
        "module.exports = defineConfig({"
      ]
    },
    {
      "path": "./backup_js/dashboard.service.js",
      "size": 10499,
      "lines": 388,
      "hash": "cb769d2ea563dfbfa7abbeb4c675435d",
      "functions": [
        "export async function loadDashboardData",
        "} catch",
        "export async function loadUserStats",
        "} catch",
        "export async function loadUserDecks",
        "} catch",
        "export async function loadWeeklyStats",
        "const weeklyStats = await apiWithFallback",
        "} catch",
        "updateDashboardStats",
        "Object.entries",
        "updateAdditionalStats",
        "updateDashboardDecks",
        "initializeChartsWithData",
        "} catch",
        "async function loadAndUpdateActivityHeatmap",
        "} catch",
        "generateMockActivityData",
        "data.push",
        "export async function updateDashboardPeriod",
        "} catch",
        "export async function refreshDashboard",
        "} catch"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import stateManager from './state-manager.js';",
        "import {",
        "import {",
        "import {",
        "import {"
      ],
      "exports": [
        "export async function loadDashboardData() {",
        "export async function loadUserStats() {",
        "export async function loadUserDecks() {",
        "export async function loadWeeklyStats() {",
        "export async function updateDashboardPeriod(period) {",
        "export async function refreshDashboard() {"
      ]
    },
    {
      "path": "./backup_js/eslint.config.js",
      "size": 3646,
      "lines": 155,
      "hash": "05e72f5b69bcf66d846e7a8dc7f79f9e",
      "functions": [],
      "imports": [
        "import js from '@eslint/js';",
        "import globals from 'globals';",
        "import cypress from 'eslint-plugin-cypress';"
      ],
      "exports": [
        "export default ["
      ]
    },
    {
      "path": "./backup_js/flashcards.service.js",
      "size": 6578,
      "lines": 252,
      "hash": "2efdb51d5b9878fd33f4c6313b2d3b17",
      "functions": [
        "export async function createFlashcard",
        "api",
        "body: JSON.stringify",
        "} catch",
        "export async function editFlashcard",
        "} catch",
        "export async function updateFlashcard",
        "api",
        "body: JSON.stringify",
        "} catch",
        "export async function deleteFlashcard",
        "api",
        "} catch",
        "export async function loadFlashcardsByDeck",
        "} catch",
        "export async function loadAllFlashcards",
        "} catch",
        "resetEditMode",
        "export function cancelEdit",
        "export function getEditingFlashcardId"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import { store } from './store/store.js';",
        "import { validateFlashcardData } from './utils/validation.js';",
        "import {",
        "import {",
        "import { FlashcardFormUtils } from './utils/formValidation.js';",
        "import { FlashcardNotifications } from './utils/notifications.js';"
      ],
      "exports": [
        "export async function createFlashcard() {",
        "export async function editFlashcard(flashcardId) {",
        "export async function updateFlashcard() {",
        "export async function deleteFlashcard(flashcardId) {",
        "export async function loadFlashcardsByDeck(deckId) {",
        "export async function loadAllFlashcards() {",
        "export function cancelEdit() {",
        "export function getEditingFlashcardId() {"
      ]
    },
    {
      "path": "./backup_js/gamification.service.js",
      "size": 16970,
      "lines": 661,
      "hash": "57516646c59ac092a46d68331dc1481d",
      "functions": [
        "export async function loadGamificationData",
        "const data = await apiWithFallback",
        "} catch",
        "export function calculatePoints",
        "switch",
        "export function startStudySession",
        "export async function endStudySession",
        "updateStreak",
        "} else if",
        "updateLevel",
        "async function checkAchievements",
        "async function grantAchievement",
        "async function saveGamificationData",
        "api",
        "} catch",
        "updateGamificationUI",
        "updatePointsDisplay",
        "setTimeout",
        "updateLevelProgress",
        "updateAchievementsDisplay",
        ".map",
        "showSessionSummary",
        "triggerLevelUpEffect",
        "setTimeout",
        "triggerAchievementEffect",
        "setTimeout",
        "export function getGamificationStats"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import { store } from './store/store.js';",
        "import {",
        "import { showNotification } from './utils/helpers.js';"
      ],
      "exports": [
        "export async function loadGamificationData() {",
        "export function calculatePoints(difficulty, card, responseTime = 0) {",
        "export function startStudySession() {",
        "export async function endStudySession() {",
        "export function getGamificationStats() {"
      ]
    },
    {
      "path": "./backup_js/helpers.js",
      "size": 8685,
      "lines": 353,
      "hash": "3469817c744e8887622ce0bc60167717",
      "functions": [
        "initializeParticles",
        "} catch",
        "autoInitParticles",
        "showSection",
        "document.querySelectorAll",
        "handleGlobalError",
        "async function checkConnectivity",
        "const response = await fetch",
        "getDeviceInfo",
        "tryInitParticles",
        "window.addEventListener",
        "window.addEventListener",
        "window.addEventListener",
        "window.addEventListener"
      ],
      "imports": [
        "import {",
        "import {",
        "import {"
      ],
      "exports": [
        "export {",
        "export {"
      ]
    },
    {
      "path": "./backup_js/main.js",
      "size": 13778,
      "lines": 486,
      "hash": "205d78a54be5b130a9282aba70a19d3b",
      "functions": [
        "document.addEventListener",
        "} catch",
        "async function checkInitialConnectivity",
        "} catch",
        "async function initializeServices",
        "await new Promise",
        "setTimeout",
        "appState.services.set",
        "} catch",
        "appState.services.set",
        "appState.errors.push",
        "async function initializeVisualComponents",
        "setTimeout",
        "setTimeout",
        "const chartsInitialized = await initializeCharts",
        "} catch",
        "} catch",
        "async function initializeServiceWorker",
        "} catch",
        "setupGlobalErrorHandling",
        "window.addEventListener",
        "appState.errors.push",
        "window.addEventListener",
        "appState.errors.push",
        "setupConnectivityHandling",
        "window.addEventListener",
        "window.addEventListener",
        "showWelcomeNotification",
        "} else if",
        "showCriticalErrorFallback",
        "export function getAppState",
        "export function restartApp",
        "export function toggleDebugMode"
      ],
      "imports": [
        "import './state-manager.js';",
        "import './dashboard-connector.js';",
        "import './study-connector.js';",
        "import './ranking-connector.js';",
        "import './flashcard-algorithm-connector.js';",
        "import './router.js';",
        "import './core-navigation.js';",
        "import './bindings.js';",
        "import './sync-manager.js';",
        "import { showSection } from './core-navigation.js';",
        "import { loadGamificationData } from './gamification.service.js';",
        "import { loadDashboardData } from './dashboard.service.js';",
        "import { initializeCreateEvents } from './create.service.js';",
        "import { generateActivityHeatmap } from './activity-heatmap.service.js';",
        "import { initializeCharts } from './charts.js';",
        "import { initializeDashboard } from './dashboard-init.js';",
        "import './dashboard-fixes.js';",
        "import { showNotification, downloadFile, debounce } from './utils/helpers.js';",
        "import { ApiClient } from './apiClient.js';",
        "import configManager, { getConfig, isFeatureEnabled } from './services/ConfigManager.js';",
        "import errorHandler from './services/ErrorHandler.js';",
        "import cacheManager from './services/CacheManager.js';",
        "import navigationService from './services/NavigationService.js';"
      ],
      "exports": [
        "export function getAppState() {",
        "export function restartApp() {",
        "export function toggleDebugMode(enabled = null) {"
      ]
    },
    {
      "path": "./backup_js/manage.service.js",
      "size": 12342,
      "lines": 432,
      "hash": "1eec0ac603f5a61ac5412d17a0e61a52",
      "functions": [
        "export async function loadManageDecks",
        "} catch",
        "} catch",
        "renderManageDecks",
        "export async function deleteDeck",
        "} catch",
        "export async function editDeck",
        "} catch",
        "showEditDeckForm",
        "createEditDeckModal",
        "export async function updateDeck",
        "api",
        "body: JSON.stringify",
        "} catch",
        "export function closeEditDeckModal",
        "export async function loadDeckFlashcards",
        "} catch",
        "renderDeckFlashcards",
        "export async function exportDeck",
        "const blob = new Blob",
        "} catch",
        "export async function loadManageData"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import { store } from './store/store.js';",
        "import { validateDeckData } from './utils/validation.js';",
        "import {",
        "import {"
      ],
      "exports": [
        "export async function loadManageDecks() {",
        "export async function deleteDeck(id) {",
        "export async function editDeck(deckId) {",
        "export async function updateDeck(deckId) {",
        "export function closeEditDeckModal() {",
        "export async function loadDeckFlashcards(deckId) {",
        "export async function exportDeck(deckId) {",
        "export async function loadManageData() {"
      ]
    },
    {
      "path": "./backup_js/particles.service.js",
      "size": 17471,
      "lines": 758,
      "hash": "aef24422a0e0a40069fde67737bc0f67",
      "functions": [
        "export async function initializeParticles",
        "} catch",
        "async function loadParticlesLibrary",
        "return new Promise",
        "script.onload =",
        "script.onerror =",
        "detectPerformanceMode",
        "getParticlesConfig",
        "applyThemeToConfig",
        "switch",
        "getCurrentTheme",
        "} catch",
        "export function pauseParticles",
        "export function resumeParticles",
        "export function destroyParticles",
        "export function addParticles",
        "particlesInstance.pJS.fn.modes.pushParticles",
        "export function removeParticles",
        "setupPerformanceMonitoring",
        "monitorPerformance",
        "createFallbackEffect",
        ".fallback-particles .particle:nth-child",
        ".fallback-particles .particle:nth-child",
        ".fallback-particles .particle:nth-child",
        ".fallback-particles .particle:nth-child",
        ".fallback-particles .particle:nth-child",
        "export function getParticlesInfo",
        "export function updateParticlesTheme"
      ],
      "imports": [
        "import { showNotification } from './utils/helpers.js';"
      ],
      "exports": [
        "export async function initializeParticles(options = {}) {",
        "export function changeParticlesConfig(",
        "export function pauseParticles() {",
        "export function resumeParticles() {",
        "export function destroyParticles() {",
        "export function addParticles(count = 10) {",
        "export function removeParticles(count = 10) {",
        "export function getParticlesInfo() {",
        "export function updateParticlesTheme(newTheme) {"
      ]
    },
    {
      "path": "./backup_js/router.js",
      "size": 11541,
      "lines": 463,
      "hash": "814b128296baa8267ab6899e0eac6282",
      "functions": [
        "export function navigate",
        "} catch",
        "executeNavigation",
        "showSection",
        "setTimeout",
        "} catch",
        "handleHashChange",
        "handleInitialLoad",
        "normalizeRoute",
        "isValidRoute",
        "isProtectedRoute",
        "isAuthenticated",
        "} catch",
        "updateHistory",
        "updatePageTitle",
        "dispatchNavigationEvent",
        "const event = new CustomEvent",
        "export function goBack",
        "export function goForward",
        "export function refresh",
        "export function getCurrentRoute",
        "export function getRouterState",
        "export function isActiveRoute",
        "export function registerRoute",
        "export function configureRouter",
        "window.addEventListener"
      ],
      "imports": [
        "import { showSection } from './core-navigation.js';",
        "import { showNotification } from './utils/helpers.js';"
      ],
      "exports": [
        "export function navigate(section, options = {}) {",
        "export function goBack() {",
        "export function goForward() {",
        "export function refresh() {",
        "export function getCurrentRoute() {",
        "export function getRouterState() {",
        "export function isActiveRoute(route) {",
        "export function registerRoute(route, isProtected = false) {",
        "export function configureRouter(config = {}) {"
      ]
    },
    {
      "path": "./backup_js/storage.service.js",
      "size": 21702,
      "lines": 811,
      "hash": "8404b8cec9c1f840150fbcc5f1503676",
      "functions": [
        "constructor",
        "checkStorageAvailability",
        "} catch",
        "initializeStorage",
        "migrateStorage",
        "} catch",
        "cleanExpiredData",
        "keysToRemove.forEach",
        "save",
        "} catch",
        "load",
        "} catch",
        "remove",
        "} catch",
        "freeUpSpace",
        "getDecks",
        "getDeck",
        "deck",
        "createDeck",
        "this.addToPendingSync",
        "updateDeck",
        "deckIndex",
        "deleteDeck",
        "deckIndex",
        "getFlashcards",
        "getFlashcardsByDeck",
        "createFlashcard",
        "this.addToPendingSync",
        "updateFlashcard",
        "cardIndex",
        "deleteFlashcard",
        "cardIndex",
        "deleteFlashcardsByDeck",
        "filteredCards",
        "updateDeckCardCount",
        "exportAllData",
        "importData",
        "} catch",
        "clearAllData",
        "} catch",
        "getStorageInfo",
        "addToPendingSync",
        "exists",
        "} catch",
        "getPendingSync",
        "removeFromPendingSync",
        "filteredItems",
        "} catch",
        "clearPendingSync",
        "} catch",
        "getPendingSyncStats"
      ],
      "imports": [
        "import { validateDeckData, validateFlashcardData } from './utils/validation.js';",
        "import { showNotification, generateId } from './utils/helpers.js';"
      ],
      "exports": [
        "export const {",
        "export default storageService;"
      ]
    },
    {
      "path": "./backup_js/store.js",
      "size": 17611,
      "lines": 772,
      "hash": "a55767334baad711411de654ebabca21",
      "functions": [
        "constructor",
        "getState",
        "setState",
        "} catch",
        "subscribe",
        "return",
        "notifySubscribers",
        "this.subscribers.forEach",
        "} catch",
        "setUser",
        "logout",
        "setDecks",
        "addDeck",
        "updateDeck",
        "deleteDeck",
        "decks",
        "setCurrentDeck",
        "startStudySession",
        "updateStudyProgress",
        "endStudySession",
        "updateSettings",
        "setLoading",
        "setCurrentSection",
        "addError",
        "removeError",
        "addNotification",
        "validateStateUpdate",
        "matchesFilter",
        "deepMerge",
        "addToHistory",
        "this.history.push",
        "saveToLocalStorage",
        "} catch",
        "loadFromLocalStorage",
        "} catch",
        "clearLocalStorage",
        "} catch",
        "setupAutoSave",
        "setInterval",
        "setupConnectivityMonitoring",
        "window.addEventListener",
        "window.addEventListener",
        "log",
        "error",
        "getDebugInfo",
        "export function createSimpleStore",
        "getState",
        "setState",
        "subscribe",
        "return"
      ],
      "imports": [
        "import { generateId } from './utils/helpers.js';",
        "import { validateRequiredFields } from './utils/validation.js';"
      ],
      "exports": [
        "export function createSimpleStore() {",
        "export { store };",
        "export default store;",
        "export { StudyingFlashStore };",
        "export const simpleStore = createSimpleStore();"
      ]
    },
    {
      "path": "./backup_js/study.service.js",
      "size": 20757,
      "lines": 750,
      "hash": "c87a642835a7575b23a4a009fea92b0b",
      "functions": [
        "export async function loadStudyDecks",
        "decksWithStats",
        "} catch",
        "async function loadDecksWithStats",
        "statsPromises",
        "const stats = await apiWithFallback",
        "} catch",
        "renderEmptyDecksMessage",
        "renderStudyDecks",
        ".map",
        "export async function startStudySession",
        "} catch",
        "async function createStudySession",
        "api",
        "} catch",
        "export async function submitAnswer",
        "store.setState",
        "window.updateFlashcard",
        "} catch",
        "async function processCardAnswer",
        "api",
        "} catch",
        "processAnswerLocally",
        "} else if",
        "export async function endStudySession",
        "api",
        "} catch",
        "store.setState",
        "} catch",
        "showSessionResults",
        "window.updateUserStats",
        "showCompletionMessage",
        "startSessionTimer",
        "sessionTimer = setInterval",
        "export function pauseStudySession",
        "export function resumeStudySession",
        "export function getCurrentSessionStats"
      ],
      "imports": [
        "import { api } from './apiClient.js';",
        "import stateManager from './state-manager.js';",
        "import { apiWithFallback, performCrudOperation } from './utils/apiHelpers.js';",
        "import { showNotification, formatDate, generateId, formatDateDDMMYYYY } from './utils/helpers.js';",
        "import { validateRequiredFields } from './utils/validation.js';"
      ],
      "exports": [
        "export async function loadStudyDecks(options = {}) {",
        "export async function startStudySession(deckId, options = {}) {",
        "export async function submitAnswer(difficulty, responseTime = null) {",
        "export async function endStudySession() {",
        "export function pauseStudySession() {",
        "export function resumeStudySession() {",
        "export function getCurrentSessionStats() {"
      ]
    },
    {
      "path": "./backup_js/sw.js",
      "size": 15426,
      "lines": 577,
      "hash": "a144b6cbc059f62abdaa2ce0612ce337",
      "functions": [
        "self.addEventListener",
        ".then",
        ".then",
        ".catch",
        "self.addEventListener",
        ".then",
        "cacheNames.map",
        ".then",
        ".catch",
        "self.addEventListener",
        "async function handleFetch",
        "} catch",
        "async function cacheFirst",
        "async function networkFirst",
        "} catch",
        "async function staleWhileRevalidate",
        "fetchPromise",
        "isStaticAsset",
        "async function handleOfflineFallback",
        "new Response",
        "JSON.stringify",
        "createOfflinePage",
        "self.addEventListener",
        "switch",
        "getCacheStatus",
        "clearAllCaches",
        "async function getCacheStatus",
        "async function clearAllCaches",
        "self.addEventListener",
        "async function doBackgroundSync",
        "} catch",
        "} catch",
        "async function syncPendingFlashcards",
        "const response = await fetch",
        "body: JSON.stringify",
        "} catch",
        "remainingFlashcards",
        "clients.forEach",
        "client.postMessage",
        "} catch",
        "async function syncPendingDecks",
        "const response = await fetch",
        "body: JSON.stringify",
        "} catch",
        "remainingDecks",
        "clients.forEach",
        "client.postMessage",
        "} catch"
      ],
      "imports": [],
      "exports": []
    },
    {
      "path": "./backup_js/vite.config.js",
      "size": 1295,
      "lines": 58,
      "hash": "3640a8e24a84c5082f9892cfc8d2a834",
      "functions": [
        "export default defineConfig"
      ],
      "imports": [
        "import { defineConfig } from 'vite';",
        "import { resolve } from 'path';"
      ],
      "exports": [
        "export default defineConfig({"
      ]
    },
    {
      "path": "./backup_js/vitest.config.js",
      "size": 774,
      "lines": 34,
      "hash": "6c804dd2bb06d7b3c2430f1ff348aeb3",
      "functions": [
        "export default defineConfig"
      ],
      "imports": [
        "import { defineConfig } from 'vitest/config';"
      ],
      "exports": [
        "export default defineConfig({"
      ]
    },
    {
      "path": "./cypress/e2e/app.cy.js",
      "size": 1703,
      "lines": 57,
      "hash": "f4e81e8be4904fce795add72976b79d2",
      "functions": [
        "describe",
        "beforeEach",
        "it",
        "it",
        "it",
        "it",
        "it"
      ],
      "imports": [],
      "exports": []
    },
    {
      "path": "./cypress/support/commands.js",
      "size": 2851,
      "lines": 90,
      "hash": "2e0a118e0c46e13cb85bbba22d273fff",
      "functions": [
        "Cypress.Commands.add",
        "Cypress.Commands.add",
        "Cypress.Commands.add",
        "Cypress.Commands.add",
        "cy.window",
        "Cypress.Commands.add",
        "cy.intercept",
        "Cypress.Commands.add",
        "cy.get",
        "cy.get",
        "cy.get"
      ],
      "imports": [],
      "exports": []
    },
    {
      "path": "./cypress/support/e2e.js",
      "size": 1423,
      "lines": 55,
      "hash": "823cbd71dd3bebed4e4a8bee36a89e0c",
      "functions": [
        "Cypress.on",
        "win.fetch = function",
        "Cypress.on",
        "cy.window",
        "JSON.stringify",
        "Cypress.Commands.add",
        "cy.window",
        "Cypress.Commands.add"
      ],
      "imports": [
        "import './commands';"
      ],
      "exports": []
    },
    {
      "path": "./services/CacheManager.js",
      "size": 12753,
      "lines": 512,
      "hash": "6e92e83739af367961a2e88a558bfcbc",
      "functions": [
        "constructor",
        "init",
        "setupStrategies",
        "this.strategies.set",
        "this.strategies.set",
        "this.strategies.set",
        "setupCleanupInterval",
        "setInterval",
        "async get",
        "async set",
        "async delete",
        "async clear",
        "async getOrSet",
        "} catch",
        "getFromMemory",
        "setToMemory",
        "this.memoryCache.set",
        "deleteFromMemory",
        "clearMemory",
        "getFromLocalStorage",
        "} catch",
        "setToLocalStorage",
        "} catch",
        "deleteFromLocalStorage",
        "clearLocalStorage",
        "keys.forEach",
        "getFromSessionStorage",
        "} catch",
        "setToSessionStorage",
        "} catch",
        "deleteFromSessionStorage",
        "clearSessionStorage",
        "keys.forEach",
        "evictLRU",
        "calculateSize",
        "shouldCompress",
        "async compress",
        "cleanup",
        "keys.forEach",
        "} catch",
        "addObserver",
        "notifyObservers",
        "this.observers.forEach",
        "} catch",
        "getMetrics",
        "configure",
        "export getCache",
        "export setCache",
        "export deleteCache",
        "export clearCache",
        "export getOrSetCache",
        "export getCacheMetrics",
        "export configureCacheManager"
      ],
      "imports": [],
      "exports": [
        "export const getCache = (key, options) => cacheManager.get(key, options);",
        "export const setCache = (key, value, options) => cacheManager.set(key, value, options);",
        "export const deleteCache = (key, options) => cacheManager.delete(key, options);",
        "export const clearCache = (options) => cacheManager.clear(options);",
        "export const getOrSetCache = (key, fetcher, options) => cacheManager.getOrSet(key, fetcher, options);",
        "export const getCacheMetrics = () => cacheManager.getMetrics();",
        "export const configureCacheManager = (config) => cacheManager.configure(config);",
        "export default cacheManager;"
      ]
    },
    {
      "path": "./services/ConfigManager.js",
      "size": 13460,
      "lines": 520,
      "hash": "c59fe5c56955ce513967e841d053561c",
      "functions": [
        "constructor",
        "init",
        "detectEnvironment",
        "loadDefaultConfig",
        "loadEnvironmentConfig",
        "getApiBaseUrl",
        "setupValidators",
        "this.validators.set",
        "this.validators.set",
        "this.validators.set",
        "this.validators.set",
        "get",
        "set",
        "validate",
        "deepMerge",
        "onChange",
        "notifyChange",
        "this.listeners.forEach",
        "} catch",
        "loadFromStorage",
        "} catch",
        "saveToStorage",
        "} catch",
        "reset",
        "getAll",
        "getEnvironmentInfo",
        "isFeatureEnabled",
        "setFeature",
        "export getConfig",
        "export setConfig",
        "export isFeatureEnabled",
        "export setFeature",
        "export onConfigChange",
        "export getEnvironment",
        "export getEnvironmentInfo"
      ],
      "imports": [],
      "exports": [
        "export const getConfig = (path, defaultValue) => configManager.get(path, defaultValue);",
        "export const setConfig = (path, value) => configManager.set(path, value);",
        "export const isFeatureEnabled = (feature) => configManager.isFeatureEnabled(feature);",
        "export const setFeature = (feature, enabled) => configManager.setFeature(feature, enabled);",
        "export const onConfigChange = (path, callback) => configManager.onChange(path, callback);",
        "export const getEnvironment = () => configManager.environment;",
        "export const getEnvironmentInfo = () => configManager.getEnvironmentInfo();",
        "export default configManager;"
      ]
    },
    {
      "path": "./services/ErrorHandler.js",
      "size": 9449,
      "lines": 350,
      "hash": "c7e541cd644420ab8328684065404605",
      "functions": [
        "constructor",
        "init",
        "setupGlobalErrorHandlers",
        "window.addEventListener",
        "this.handleError",
        "window.addEventListener",
        "this.handleError",
        "window.addEventListener",
        "this.handleError",
        "setupDefaultStrategies",
        "this.addStrategy",
        "this.addStrategy",
        "this.addStrategy",
        "this.addStrategy",
        "this.addStrategy",
        "handleError",
        "} catch",
        "enrichError",
        "addToQueue",
        "addStrategy",
        "addListener",
        "notifyListeners",
        "this.errorListeners.forEach",
        "} catch",
        "async showUserNotification",
        "} catch",
        "isUserFacingError",
        "generateErrorId",
        "getSessionId",
        "getUserId",
        "getStats",
        "this.errorQueue.forEach",
        "clearQueue",
        "configure",
        "reportError",
        "export reportError",
        "export addErrorStrategy",
        "export addErrorListener",
        "export getErrorStats",
        "export configureErrorHandler"
      ],
      "imports": [],
      "exports": [
        "export const reportError = (error, context) => errorHandler.reportError(error, context);",
        "export const addErrorStrategy = (type, strategy) => errorHandler.addStrategy(type, strategy);",
        "export const addErrorListener = (listener) => errorHandler.addListener(listener);",
        "export const getErrorStats = () => errorHandler.getStats();",
        "export const configureErrorHandler = (config) => errorHandler.configure(config);",
        "export default errorHandler;"
      ]
    },
    {
      "path": "./services/NavigationService.js",
      "size": 5297,
      "lines": 201,
      "hash": "e880e396db3e70bbbd311d1b66640827",
      "functions": [
        "constructor",
        "init",
        "waitForNavigationSystem",
        "checkNavigation",
        "navigateTo",
        "} catch",
        "processPendingNavigations",
        "while",
        "getCurrentSection",
        "goBack",
        "clearHistory",
        "on",
        "off",
        "emit",
        "this.listeners.get",
        "} catch",
        "isReady",
        "getStats",
        "export navigateTo",
        "export getCurrentSection",
        "export goBack",
        "export onNavigationChange",
        "export onNavigationReady"
      ],
      "imports": [],
      "exports": [
        "export const navigateTo = (sectionId, options) => navigationService.navigateTo(sectionId, options);",
        "export const getCurrentSection = () => navigationService.getCurrentSection();",
        "export const goBack = () => navigationService.goBack();",
        "export const onNavigationChange = (callback) => navigationService.on('navigationChanged', callback);",
        "export const onNavigationReady = (callback) => navigationService.on('navigationReady', callback);",
        "export default navigationService;"
      ]
    },
    {
      "path": "./store/store.js",
      "size": 2746,
      "lines": 123,
      "hash": "e051fd153b01e5f8eabdc5d2813c0398",
      "functions": [
        "constructor",
        "this.store.subscribe",
        "getState",
        "setState",
        "subscribe",
        "return",
        "notifyListeners",
        "this.listeners.forEach",
        "} catch",
        "setUser",
        "setDecks",
        "addDeck",
        "updateDeck",
        "deleteDeck"
      ],
      "imports": [
        "import store, { StudyingFlashStore, simpleStore } from '../store.js';",
        "import store from './store.js'"
      ],
      "exports": [
        "export default legacyStore;",
        "export { legacyStore as store };",
        "export { store as mainStore, StudyingFlashStore, simpleStore };"
      ]
    },
    {
      "path": "./tests/setup.js",
      "size": 1240,
      "lines": 64,
      "hash": "c732b6898f869ef882efaa36cd584989",
      "functions": [
        "beforeEach"
      ],
      "imports": [
        "import { vi, beforeEach } from 'vitest';"
      ],
      "exports": []
    },
    {
      "path": "./tests/unit/auth.service.test.js",
      "size": 2765,
      "lines": 103,
      "hash": "f5c73f1ec1d7f478451fd84e648ff6e5",
      "functions": [
        "vi.mock",
        "vi.mock",
        "vi.mock",
        "vi.mock",
        "vi.mock",
        "vi.mock",
        "describe",
        "beforeEach",
        "describe",
        "it",
        "it",
        "describe",
        "it",
        "it"
      ],
      "imports": [
        "import { describe, it, expect, vi, beforeEach } from 'vitest';"
      ],
      "exports": []
    },
    {
      "path": "./tests/unit/navigation.test.js",
      "size": 3874,
      "lines": 144,
      "hash": "c3dfc02614186ac04adc1904d578357e",
      "functions": [
        "describe",
        "beforeEach",
        "describe",
        "it",
        "it",
        "it",
        "describe",
        "it",
        "it",
        "describe",
        "it",
        "} catch"
      ],
      "imports": [
        "import { describe, it, expect, vi, beforeEach } from 'vitest';"
      ],
      "exports": []
    },
    {
      "path": "./utils/apiHelpers.js",
      "size": 4524,
      "lines": 181,
      "hash": "6c147ad3ede1a6bad49bd65086c63946",
      "functions": [
        "export async function multipleApiWithFallback",
        "} catch",
        "} catch",
        "} catch"
      ],
      "imports": [
        "import { api } from '../apiClient.js';",
        "import { showNotification } from './helpers.js';"
      ],
      "exports": [
        "export async function apiWithFallback(",
        "export async function multipleApiWithFallback(apiCalls) {",
        "export async function performCrudOperation(",
        "export async function loadDataWithRetry(",
        "export const FALLBACK_DATA = {"
      ]
    },
    {
      "path": "./utils/formValidation.js",
      "size": 7006,
      "lines": 235,
      "hash": "8aa4d3170e98da670e065b502bbbfcba",
      "functions": [
        "static validateRequiredFields",
        "static validateFlashcardForm",
        "static validateDeckForm",
        "static getFormData",
        "static getFieldData",
        "static clearForm",
        "static clearFields",
        "selectors.forEach",
        "static getCreateFormData",
        "return FormValidator.getFieldData",
        "static clearCreateForm",
        "static validateAndGetData",
        "static getCreateFormData",
        "return FormValidator.getFieldData",
        "static clearCreateForm",
        "static validateAndGetData"
      ],
      "imports": [],
      "exports": [
        "if (typeof module !== 'undefined' && module.exports) {",
        "module.exports = {"
      ]
    },
    {
      "path": "./utils/helpers.js",
      "size": 15878,
      "lines": 580,
      "hash": "2a51aed70df321d4355fdbab86b49e1f",
      "functions": [
        "export function debounce",
        "return function executedFunction",
        "later",
        "switch",
        "setTimeout",
        "setTimeout",
        "setTimeout",
        "export function formatDate",
        "return dateObj.toLocaleDateString",
        "export function formatRelativeDate",
        "export function capitalize",
        "export function capitalizeFirst",
        "export function truncateText",
        "export function generateId",
        "export async function copyToClipboard",
        "} catch",
        "export function getVisibleElement",
        "export function clearForm",
        "inputs.forEach",
        "export function renderEmptyState",
        "} else if",
        "export function renderEmptyDecksState",
        "export function renderEmptyFlashcardsState",
        "export function renderEmptyStatsState",
        "export function downloadFile",
        "} catch",
        "export function capitalizeWords",
        "export function sanitizeFilename",
        "export function parseCSV",
        "export function formatFileSize",
        "export function isValidEmail",
        "export function isValidPassword"
      ],
      "imports": [],
      "exports": [
        "export function debounce(func, wait) {",
        "export function showNotification(",
        "export function formatDate(date, locale = 'es-ES') {",
        "export function formatRelativeDate(date) {",
        "export function capitalize(str) {",
        "export function capitalizeFirst(str) {",
        "export function truncateText(text, maxLength, suffix = '...') {",
        "export function generateId() {",
        "export async function copyToClipboard(text) {",
        "export function getVisibleElement(selector) {",
        "export function clearForm(formSelector) {",
        "export function renderEmptyState(container, options = {}) {",
        "export function renderEmptyDecksState(container, options = {}) {",
        "export function renderEmptyFlashcardsState(container, options = {}) {",
        "export function renderEmptySearchState(",
        "export function renderEmptyStatsState(container, options = {}) {",
        "export function downloadFile(content, filename, mimeType = 'text/plain') {",
        "export function capitalizeWords(str) {",
        "export function sanitizeFilename(filename) {",
        "export function parseCSV(csvContent, delimiter = ',') {",
        "export function formatFileSize(bytes) {",
        "export function isValidEmail(email) {",
        "export function isValidPassword(password) {"
      ]
    },
    {
      "path": "./utils/lazy-loader.js",
      "size": 9685,
      "lines": 374,
      "hash": "47676bdb6c043464d5a0123770202ea8",
      "functions": [
        "constructor",
        "init",
        "setupImageObserver",
        "this.imageObserver = new IntersectionObserver",
        "entries.forEach",
        "observeImages",
        "lazyImages.forEach",
        "loadImage",
        "return new Promise",
        "imageLoader.onload =",
        "imageLoader.onerror =",
        "loadAllImages",
        "lazyImages.forEach",
        "getErrorImageSrc",
        "setupModuleLazyLoading",
        "async preloadCriticalModules",
        "} catch",
        "setupOnDemandLoading",
        "Object.entries",
        "setupSectionTrigger",
        "observer",
        "entries.forEach",
        "checkElement",
        "async loadModule",
        "} catch",
        "async loadComponent",
        "} catch",
        "preloadForNavigation",
        "modules.forEach",
        "this.loadModule",
        "createImagePlaceholder",
        "addLazyImage",
        "img.addEventListener",
        "getStats"
      ],
      "imports": [],
      "exports": [
        "export default lazyLoader;"
      ]
    },
    {
      "path": "./utils/loading.js",
      "size": 11222,
      "lines": 372,
      "hash": "57236e6b44641b3c997d11f3d6927660",
      "functions": [
        "export function showButtonLoading",
        "return",
        "export function showLoadingOverlay",
        "return",
        "export function showFieldValidation",
        "export function showProgressToast",
        "updateProgress:",
        "complete:",
        "setTimeout",
        "setTimeout",
        "error:",
        "setTimeout",
        "setTimeout",
        "remove:",
        "export async function withLoadingFeedback",
        "restoreButton",
        "hideOverlay",
        "} catch"
      ],
      "imports": [
        "import { showNotification } from './helpers.js';"
      ],
      "exports": [
        "export function showButtonLoading(buttonSelector, loadingText = 'Cargando...') {",
        "export function showLoadingOverlay(containerSelector, message = 'Cargando...') {",
        "export function showFieldValidation(fieldSelector, isValid, message = '') {",
        "export function showProgressToast(message, steps = 1) {",
        "export async function withLoadingFeedback(operation, options = {}) {"
      ]
    },
    {
      "path": "./utils/notifications.js",
      "size": 9505,
      "lines": 312,
      "hash": "1b160ba382803d44134b55d7cda9f404",
      "functions": [
        "static show",
        "static success",
        "static error",
        "this.show",
        "static warning",
        "static info",
        "static _showBasicNotification",
        "setTimeout",
        "setTimeout",
        "setTimeout",
        "notification.addEventListener",
        "setTimeout",
        "static created",
        "static updated",
        "static deleted",
        "static validationError",
        "static createError",
        "static updateError",
        "static deleteError",
        "static created",
        "static updated",
        "static deleted",
        "static validationError",
        "static createError",
        "static updateError",
        "static deleteError",
        "static connectionError",
        "static serverError",
        "static unauthorized",
        "static notFound",
        "static loading",
        "static saving"
      ],
      "imports": [],
      "exports": [
        "if (typeof module !== 'undefined' && module.exports) {",
        "module.exports = {"
      ]
    },
    {
      "path": "./utils/validation.js",
      "size": 3664,
      "lines": 144,
      "hash": "d62f6064b734f0fcf9a75870208ce4bc",
      "functions": [
        "emptyFields",
        "export function validateLoginCredentials",
        "export function validateFlashcardData",
        "export function validateDeckData",
        "export function validateEmail",
        "export function validatePassword",
        "export function validateRegistrationData"
      ],
      "imports": [
        "import { showNotification } from './helpers.js';"
      ],
      "exports": [
        "export function validateRequiredFields(",
        "export function validateLoginCredentials(email, password) {",
        "export function validateFlashcardData(deckId, front, back) {",
        "export function validateDeckData(name) {",
        "export function validateEmail(email) {",
        "export function validatePassword(password) {",
        "export function validateRegistrationData(email, password, confirmPassword) {"
      ]
    }
  ]
}