(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))o(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const i of a.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function t(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerPolicy&&(a.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?a.credentials="include":n.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function o(n){if(n.ep)return;n.ep=!0;const a=t(n);fetch(n.href,a)}})();const ce="modulepreload",de=function(r){return"/"+r},M={},v=function(e,t,o){let n=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const i=document.querySelector("meta[property=csp-nonce]"),c=(i==null?void 0:i.nonce)||(i==null?void 0:i.getAttribute("nonce"));n=Promise.allSettled(t.map(u=>{if(u=de(u),u in M)return;M[u]=!0;const g=u.endsWith(".css"),ae=g?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${u}"]${ae}`))return;const f=document.createElement("link");if(f.rel=g?"stylesheet":ce,g||(f.as="script"),f.crossOrigin="",f.href=u,c&&f.setAttribute("nonce",c),document.head.appendChild(f),g)return new Promise((ie,se)=>{f.addEventListener("load",ie),f.addEventListener("error",()=>se(new Error(`Unable to preload CSS for ${u}`)))})}))}function a(i){const c=new Event("vite:preloadError",{cancelable:!0});if(c.payload=i,window.dispatchEvent(c),!c.defaultPrevented)throw i}return n.then(i=>{for(const c of i||[])c.status==="rejected"&&a(c.reason);return e().catch(a)})};function I(r){document.querySelectorAll(".section").forEach(o=>{o.classList.remove("active")});const e=document.getElementById(r);e&&e.classList.add("active"),document.querySelectorAll(".nav-link").forEach(o=>{o.classList.remove("active")});const t=document.querySelector(`[data-section="${r}"]`);switch(t&&t.classList.add("active"),r){case"dashboard":loadDashboardData(),v(()=>import("./charts-Bp_x8dfL.js"),[]).then(o=>o.initializeCharts&&o.initializeCharts());break;case"estudiar":v(()=>Promise.resolve().then(()=>we),void 0).then(o=>o.loadStudyDecks&&o.loadStudyDecks());break;case"crear":v(()=>Promise.resolve().then(()=>ke),void 0).then(o=>o.openCreateDeckModal&&o.openCreateDeckModal());break;case"gestionar":v(()=>Promise.resolve().then(()=>Ee),void 0).then(o=>o.loadManageDecks&&o.loadManageDecks());break;case"ranking":loadRankingData();break}}window.showSection=I;document.addEventListener("DOMContentLoaded",()=>{document.querySelectorAll(".nav-link").forEach(r=>{r.addEventListener("click",function(e){e.preventDefault();const t=this.getAttribute("data-section");window.location.hash=t})})});function le(r){window.location.hash.replace("#","")!==r?window.location.hash=r:I(r)}function P(){const r=window.location.hash?window.location.hash.slice(1):"inicio";I(r)}window.addEventListener("hashchange",P);document.addEventListener("DOMContentLoaded",P);window.navigate=le;const ue=window.API_BASE||"";async function d(r,e={}){const t=localStorage.getItem("authToken"),o={"Content-Type":"application/json",...e.headers||{}};t&&(o.Authorization=`Bearer ${t}`);const n=await fetch(`${ue}${r}`,{...e,headers:o});let a;try{a=await n.json()}catch{a=null}if(!n.ok){const i=a||{message:"Request failed"};throw i.status=n.status,i}return a}const m={_state:{currentUser:null,studySession:{deck:null,cards:[],index:0,correct:0,incorrect:0}},_subs:[],getState(){return this._state},setState(r){this._state={...this._state,...r},this._subs.forEach(e=>e(this._state))},subscribe(r){return this._subs.push(r),()=>{this._subs=this._subs.filter(e=>e!==r)}}};async function R(){try{const r=await d("/api/stats");window.updateDashboardStats&&window.updateDashboardStats(r);const e=await d("/api/decks");window.updateDashboardDecks&&window.updateDashboardDecks(e)}catch(r){console.error("Error loading dashboard data:",r),window.showNotification&&window.showNotification("Error al cargar datos del dashboard","error")}}async function he(){if(localStorage.getItem("authToken"))try{const e=await d("/api/auth/verify");e&&e.user?(m.setState({currentUser:e.user}),window.updateAuthUI&&window.updateAuthUI(),await R()):localStorage.removeItem("authToken")}catch(e){console.error("Auth verification failed:",e),localStorage.removeItem("authToken")}}async function me(r,e){if(!r||!e){window.showNotification&&window.showNotification("Por favor, completa todos los campos","error");return}try{const t=await d("/api/auth/login",{method:"POST",body:JSON.stringify({email:r,password:e})});localStorage.setItem("authToken",t.token),m.setState({currentUser:t.user}),window.updateAuthUI&&window.updateAuthUI(),window.hideLoginModal&&window.hideLoginModal(),await R()}catch(t){if(console.error("Login failed:",t),window.showNotification){const o=t&&t.message||"Error al iniciar sesión";window.showNotification(o,"error")}}}function fe(){localStorage.removeItem("authToken"),m.setState({currentUser:null}),window.updateAuthUI&&window.updateAuthUI(),window.showSection&&window.showSection("inicio")}window.checkAuthStatus=he;async function pe(){try{const r=await d("/api/decks"),e=document.getElementById("deck-selection");if(!e)return;if(!r||r.length===0){e.innerHTML=`
        <div class="card text-center">
          <h3>No tienes decks para estudiar</h3>
          <p class="text-muted mb-3">Crea tu primer deck para comenzar</p>
          <button class="btn btn-primary" onclick="showSection('crear')">
            ➕ Crear Deck
          </button>
        </div>`;return}e.innerHTML=r.map(t=>`
      <div class="deck-card" onclick="startStudySession(${t.id})">
        <h3>${t.name}</h3>
        <p>${t.description||"Sin descripción"}</p>
        <span>${t.card_count||0} cartas</span>
      </div>
    `).join("")}catch(r){console.error("Error loading decks:",r),window.showNotification&&window.showNotification("Error al cargar decks para estudiar","error")}}async function U(r){try{const e=await d(`/api/decks/${r}/flashcards`);if(!e||e.length===0){window.showNotification&&window.showNotification("Este deck no tiene flashcards","warning");return}m.setState({studySession:{deck:r,cards:e,index:0,correct:0,incorrect:0}}),window.enterStudyMode&&window.enterStudyMode(e[0])}catch(e){console.error("Error starting study session:",e),window.showNotification&&window.showNotification("Error al iniciar sesión de estudio","error")}}function J(r){const t=m.getState().studySession;if(!t.cards.length)return;const o=t.index+1;m.setState({studySession:{...t,index:o,correct:t.correct+(r?1:0),incorrect:t.incorrect+(r?0:1)}}),o>=t.cards.length?window.endStudySession&&window.endStudySession():window.updateFlashcard&&window.updateFlashcard(t.cards[o])}const we=Object.freeze(Object.defineProperty({__proto__:null,loadStudyDecks:pe,startStudySession:U,submitAnswer:J},Symbol.toStringTag,{value:"Module"}));class ge{constructor(){this.DECKS_KEY="studyingflash_decks",this.FLASHCARDS_KEY="studyingflash_flashcards",this.USER_KEY="studyingflash_user",this.initializeData()}initializeData(){if(!localStorage.getItem(this.DECKS_KEY)){const e=[{id:1,name:"Vocabulario Inglés",description:"Palabras básicas en inglés",public:!1,created_at:new Date().toISOString(),flashcard_count:0},{id:2,name:"Matemáticas Básicas",description:"Fórmulas y conceptos matemáticos",public:!0,created_at:new Date().toISOString(),flashcard_count:0}];localStorage.setItem(this.DECKS_KEY,JSON.stringify(e))}if(localStorage.getItem(this.FLASHCARDS_KEY)||localStorage.setItem(this.FLASHCARDS_KEY,JSON.stringify([])),!localStorage.getItem(this.USER_KEY)){const e={id:1,username:"usuario_demo",email:"demo@studyingflash.com",level:1,points:0,streak:0};localStorage.setItem(this.USER_KEY,JSON.stringify(e))}}getDecks(){try{return JSON.parse(localStorage.getItem(this.DECKS_KEY)||"[]")}catch(e){return console.error("Error getting decks:",e),[]}}getDeck(e){return this.getDecks().find(o=>o.id===parseInt(e))}createDeck(e){try{const t=this.getDecks(),n={id:Math.max(...t.map(a=>a.id),0)+1,name:e.name,description:e.description||"",public:e.public||!1,created_at:new Date().toISOString(),flashcard_count:0};return t.push(n),localStorage.setItem(this.DECKS_KEY,JSON.stringify(t)),n}catch(t){throw console.error("Error creating deck:",t),t}}updateDeck(e,t){try{const o=this.getDecks(),n=o.findIndex(a=>a.id===parseInt(e));if(n===-1)throw new Error("Deck not found");return o[n]={...o[n],...t},localStorage.setItem(this.DECKS_KEY,JSON.stringify(o)),o[n]}catch(o){throw console.error("Error updating deck:",o),o}}deleteDeck(e){try{const o=this.getDecks().filter(i=>i.id!==parseInt(e));localStorage.setItem(this.DECKS_KEY,JSON.stringify(o));const a=this.getFlashcards().filter(i=>i.deck_id!==parseInt(e));return localStorage.setItem(this.FLASHCARDS_KEY,JSON.stringify(a)),!0}catch(t){throw console.error("Error deleting deck:",t),t}}getFlashcards(e=null){try{const t=JSON.parse(localStorage.getItem(this.FLASHCARDS_KEY)||"[]");return e?t.filter(o=>o.deck_id===parseInt(e)):t}catch(t){return console.error("Error getting flashcards:",t),[]}}getFlashcard(e){return this.getFlashcards().find(o=>o.id===parseInt(e))}createFlashcard(e){try{const t=this.getFlashcards(),n={id:Math.max(...t.map(a=>a.id),0)+1,deck_id:parseInt(e.deck_id),front:e.front,back:e.back,created_at:new Date().toISOString(),difficulty:0,next_review:new Date().toISOString(),times_reviewed:0,correct_count:0,incorrect_count:0};return t.push(n),localStorage.setItem(this.FLASHCARDS_KEY,JSON.stringify(t)),this.updateDeckFlashcardCount(e.deck_id),n}catch(t){throw console.error("Error creating flashcard:",t),t}}updateFlashcard(e,t){try{const o=this.getFlashcards(),n=o.findIndex(a=>a.id===parseInt(e));if(n===-1)throw new Error("Flashcard not found");return o[n]={...o[n],...t},localStorage.setItem(this.FLASHCARDS_KEY,JSON.stringify(o)),o[n]}catch(o){throw console.error("Error updating flashcard:",o),o}}deleteFlashcard(e){try{const t=this.getFlashcards(),o=t.find(a=>a.id===parseInt(e));if(!o)throw new Error("Flashcard not found");const n=t.filter(a=>a.id!==parseInt(e));return localStorage.setItem(this.FLASHCARDS_KEY,JSON.stringify(n)),this.updateDeckFlashcardCount(o.deck_id),!0}catch(t){throw console.error("Error deleting flashcard:",t),t}}updateDeckFlashcardCount(e){try{const o=this.getFlashcards(e).length,n=this.getDecks(),a=n.findIndex(i=>i.id===parseInt(e));a!==-1&&(n[a].flashcard_count=o,localStorage.setItem(this.DECKS_KEY,JSON.stringify(n)))}catch(t){console.error("Error updating deck flashcard count:",t)}}searchFlashcards(e,t=null){try{let o=this.getFlashcards(t);if(e){const a=e.toLowerCase();o=o.filter(i=>i.front.toLowerCase().includes(a)||i.back.toLowerCase().includes(a))}const n=this.getDecks();return o.map(a=>{const i=n.find(c=>c.id===a.deck_id);return{...a,deck_name:i?i.name:"Deck desconocido"}})}catch(o){return console.error("Error searching flashcards:",o),[]}}getFlashcardStats(e=null){try{const t=this.getFlashcards(e);return{total:t.length,reviewed:t.filter(o=>o.times_reviewed>0).length,pending:t.filter(o=>o.times_reviewed===0).length,correct_rate:t.length>0?t.reduce((o,n)=>o+n.correct_count,0)/Math.max(t.reduce((o,n)=>o+n.times_reviewed,0),1)*100:0}}catch(t){return console.error("Error getting flashcard stats:",t),{total:0,reviewed:0,pending:0,correct_rate:0}}}getUser(){try{return JSON.parse(localStorage.getItem(this.USER_KEY)||"{}")}catch(e){return console.error("Error getting user:",e),{}}}updateUser(e){try{const o={...this.getUser(),...e};return localStorage.setItem(this.USER_KEY,JSON.stringify(o)),o}catch(t){throw console.error("Error updating user:",t),t}}clearAll(){localStorage.removeItem(this.DECKS_KEY),localStorage.removeItem(this.FLASHCARDS_KEY),localStorage.removeItem(this.USER_KEY),this.initializeData()}}const D=new ge;function ve(r,e){let t;return function(...n){const a=()=>{clearTimeout(t),r(...n)};clearTimeout(t),t=setTimeout(a,e)}}function s(r,e="info"){const t=document.createElement("div");switch(t.className=`notification notification-${e}`,t.style.cssText=`
        position: fixed;
        top: 100px;
        right: 20px;
        z-index: 10000;
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        color: white;
        font-weight: 500;
        max-width: 300px;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      `,e){case"success":t.style.background="linear-gradient(135deg, #10b981, #059669)";break;case"error":t.style.background="linear-gradient(135deg, #ef4444, #dc2626)";break;case"warning":t.style.background="linear-gradient(135deg, #f59e0b, #d97706)";break;default:t.style.background="linear-gradient(135deg, #3b82f6, #2563eb)"}t.textContent=r,document.body.appendChild(t),setTimeout(()=>{t.style.transform="translateX(0)"},100),setTimeout(()=>{t.style.transform="translateX(100%)",setTimeout(()=>{document.body.contains(t)&&document.body.removeChild(t)},300)},3e3)}function K(){typeof particlesJS<"u"&&particlesJS("particles-js",{particles:{number:{value:50,density:{enable:!0,value_area:800}},color:{value:"#ffffff"},shape:{type:"circle"},opacity:{value:.1,random:!0},size:{value:3,random:!0},line_linked:{enable:!0,distance:150,color:"#ffffff",opacity:.1,width:1},move:{enable:!0,speed:1,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1}},interactivity:{detect_on:"canvas",events:{onhover:{enable:!0,mode:"repulse"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:400,line_linked:{opacity:1}},bubble:{distance:400,size:40,duration:2,opacity:8,speed:3},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}}},retina_detect:!0})}window.debounce=ve;window.showNotification=s;window.initializeParticles=K;const T=()=>{document.getElementById("particles-js")&&K()};document.readyState!=="loading"?T():document.addEventListener("DOMContentLoaded",T);async function S(){try{let r;try{r=await d("/api/decks")}catch{console.log("API no disponible, usando almacenamiento local"),r=D.getDecks()}const e=document.getElementById("flashcard-deck");return e&&Array.isArray(r)&&(e.innerHTML='<option value="">Selecciona un deck...</option>'+r.map(t=>`<option value="${t.id}">${t.name}</option>`).join("")),r}catch(r){return console.error("Error loading decks:",r),s("Error al cargar decks","error"),[]}}function ye(){window.showCreateDeckModal&&window.showCreateDeckModal()}async function b(){const r=document.getElementById("deck-name"),e=document.getElementById("deck-description"),t=document.getElementById("deck-public");if(!r||!e){s("Formulario no encontrado","error");return}const o={name:r.value.trim(),description:e.value.trim(),public:t?t.checked:!1};if(!o.name){s("El nombre es obligatorio","warning");return}try{let n;try{n=await d("/api/decks",{method:"POST",body:JSON.stringify(o)})}catch{console.log("API no disponible, usando almacenamiento local"),n=D.createDeck(o)}return s("Deck creado con éxito 🎉","success"),r.value="",e.value="",t&&(t.checked=!1),await S(),window.loadDashboardData&&window.loadDashboardData(),n}catch(n){console.error("Error creando deck:",n),s("Error al crear deck","error")}}async function L(){const r=document.getElementById("flashcard-deck"),e=document.getElementById("flashcard-front"),t=document.getElementById("flashcard-back");if(!r||!e||!t){s("Formulario no encontrado","error");return}const o=r.value,n=e.value.trim(),a=t.value.trim();if(!o||!n||!a){s("Por favor, completa todos los campos","warning");return}try{let i;try{i=await d("/api/flashcards",{method:"POST",body:JSON.stringify({deck_id:o,front:n,back:a})})}catch{console.log("API no disponible, usando almacenamiento local"),i=D.createFlashcard({deck_id:o,front:n,back:a})}return s("Flashcard creada exitosamente 🎉","success"),e.value="",t.value="",window.loadManageData&&window.loadManageData(),i}catch(i){console.error("Error creating flashcard:",i),s("Error al crear la flashcard","error")}}function j(){const r=document.getElementById("create-deck-btn");r&&r.addEventListener("click",b);const e=document.getElementById("create-flashcard-btn");e&&e.addEventListener("click",L),S()}window.createDeck=b;window.createFlashcard=L;window.loadDecksForCreation=S;const ke=Object.freeze(Object.defineProperty({__proto__:null,createDeck:b,createFlashcard:L,initializeCreateEvents:j,loadDecksForCreation:S,openCreateDeckModal:ye},Symbol.toStringTag,{value:"Module"}));async function z(){try{const r=await d("/api/decks"),e=document.getElementById("manage-decks");if(!e)return;if(!r.length){e.innerHTML='<p class="text-muted">No tienes decks creados.</p>';return}e.innerHTML=r.map(t=>`
      <div class="deck-manage-card">
        <h4>${t.name}</h4>
        <button class="btn btn-sm btn-danger" onclick="deleteDeck(${t.id})">Eliminar</button>
      </div>
    `).join("")}catch(r){console.error("Error cargando decks:",r),window.showNotification&&window.showNotification("Error al cargar decks","error")}}async function q(r){if(confirm("¿Seguro que quieres eliminar este deck?"))try{await d("/api/decks/"+r,{method:"DELETE"}),window.showNotification&&window.showNotification("Deck eliminado","success"),await z(),window.loadDashboardData&&window.loadDashboardData()}catch(e){console.error("Error eliminando deck:",e),window.showNotification&&window.showNotification("Error al eliminar deck","error")}}const Ee=Object.freeze(Object.defineProperty({__proto__:null,deleteDeck:q,loadManageDecks:z},Symbol.toStringTag,{value:"Module"}));document.addEventListener("click",async r=>{const e=r.target.closest("[data-action]");if(!e)return;switch(e.dataset.action){case"login":{const o=document.getElementById("login-form");if(!o)return;const n=o.querySelector('input[name="email"]').value,a=o.querySelector('input[name="password"]').value;await me(n,a);break}case"logout":await fe();break;case"create-deck":{const o=document.getElementById("create-deck-form");if(!o)return;o.querySelector('input[name="name"]').value,o.querySelector('textarea[name="description"]').value,await b();break}case"start-study":await U(e.dataset.id);break;case"submit-answer":await J(e.dataset.correct==="true");break;case"delete-deck":await q(e.dataset.id);break}});let l={points:0,level:1,streak:0,achievements:[],totalSessions:0,totalCards:0,correctAnswers:0},w={total:0,correct:0};function Se(r,e,t=0){let o=0;switch(r){case 0:o=2;break;case 1:o=5;break;case 2:o=8;break;case 3:o=10;break}let n=0;t>0&&t<5e3&&(n=Math.max(0,5-Math.floor(t/1e3)));const a=o+n;return l.points+=a,w.total++,r>=2&&(w.correct++,l.correctAnswers++),l.totalCards++,De(a,n>0),H(),C(),a}function H(){const r=[{level:1,points:0,title:"Principiante",icon:"🌱"},{level:2,points:100,title:"Estudiante",icon:"📚"},{level:3,points:300,title:"Aprendiz",icon:"🎓"},{level:4,points:600,title:"Conocedor",icon:"💪"},{level:5,points:1e3,title:"Experto",icon:"🎯"},{level:6,points:1500,title:"Maestro",icon:"🏆"},{level:7,points:2100,title:"Sabio",icon:"👑"},{level:8,points:2800,title:"Genio",icon:"✨"},{level:9,points:3600,title:"Leyenda",icon:"🌟"},{level:10,points:4500,title:"Inmortal",icon:"💫"}],e=l.level;let t=1;for(let o=r.length-1;o>=0;o--)if(l.points>=r[o].points){t=r[o].level;break}t>e&&(l.level=t,Ie(t,r[t-1])),F()}function be(r){const e=[{level:1,points:0,title:"Principiante",icon:"🌱"},{level:2,points:100,title:"Estudiante",icon:"📚"},{level:3,points:300,title:"Aprendiz",icon:"🎓"},{level:4,points:600,title:"Conocedor",icon:"💪"},{level:5,points:1e3,title:"Experto",icon:"🎯"},{level:6,points:1500,title:"Maestro",icon:"🏆"},{level:7,points:2100,title:"Sabio",icon:"👑"},{level:8,points:2800,title:"Genio",icon:"✨"},{level:9,points:3600,title:"Leyenda",icon:"🌟"},{level:10,points:4500,title:"Inmortal",icon:"💫"}];return e.find(t=>t.level===r)||e[0]}function F(){const r=document.getElementById("user-level"),e=document.getElementById("user-points");if(r){const t=be(l.level);r.innerHTML=`
      <span class="level-icon">${t.icon}</span>
      <span>Nivel ${l.level}</span>
    `}e&&(e.innerHTML=`
      <span>⭐</span>
      <span>${l.points} pts</span>
    `)}function _e(){[{id:"first_session",title:"Primera Sesión",description:"Completa tu primera sesión de estudio",icon:"🎯",condition:()=>w.total>0},{id:"perfect_session",title:"Sesión Perfecta",description:"Responde todas las cartas correctamente",icon:"💯",condition:()=>w.total>0&&w.correct===w.total},{id:"speed_demon",title:"Demonio de la Velocidad",description:"Completa una sesión en menos de 2 minutos",icon:"⚡",condition:()=>!1},{id:"streak_3",title:"Racha de 3",description:"Estudia 3 días consecutivos",icon:"🔥",condition:()=>l.streak>=3},{id:"points_100",title:"Centurión",description:"Acumula 100 puntos",icon:"🏅",condition:()=>l.points>=100},{id:"points_500",title:"Quinientos",description:"Acumula 500 puntos",icon:"🎖️",condition:()=>l.points>=500},{id:"cards_100",title:"Estudioso",description:"Estudia 100 cartas",icon:"📖",condition:()=>l.totalCards>=100}].forEach(e=>{!l.achievements.includes(e.id)&&e.condition()&&(l.achievements.push(e.id),A(e.title,e.description,e.icon),l.points+=50)}),C()}function A(r,e,t){const o=document.createElement("div");o.className="achievement-notification",o.innerHTML=`
    <div class="achievement-content">
      <div class="achievement-icon">${t}</div>
      <div class="achievement-text">
        <div class="achievement-title">${r}</div>
        <div class="achievement-description">${e}</div>
      </div>
    </div>
  `,document.body.appendChild(o),setTimeout(()=>o.classList.add("show"),100),setTimeout(()=>{o.classList.remove("show"),setTimeout(()=>document.body.removeChild(o),300)},4e3)}function Ie(r,e){A(`¡Nivel ${r}!`,`Has alcanzado el nivel ${e.title}`,e.icon)}function De(r,e=!1){const t=document.createElement("div");t.className="points-animation",t.innerHTML=`
    +${r} pts ${e?"⚡":""}
  `,document.body.appendChild(t),setTimeout(()=>t.classList.add("show"),100),setTimeout(()=>{t.classList.remove("show"),setTimeout(()=>document.body.removeChild(t),300)},2e3)}function Y(){const r=localStorage.getItem("gamificationData");return r&&(l={...l,...JSON.parse(r)}),F(),l}function C(){localStorage.setItem("gamificationData",JSON.stringify(l)),F()}window.calculatePoints=Se;window.updateLevel=H;window.checkAchievements=_e;window.showAchievement=A;window.loadGamificationData=Y;window.saveGamificationData=C;let y="ultra_sm2";function Le(){const r=document.getElementById("algorithm-modal");r&&(r.style.display="flex",x("ultra_sm2"),setTimeout(()=>{const e=r.querySelector(".modal-content");e&&(e.style.transform="scale(1)",e.style.opacity="1")},10))}function k(){const r=document.getElementById("algorithm-modal");r&&(r.style.display="none")}function x(r){y=r,document.querySelectorAll(".algorithm-option").forEach(e=>{const t=e.querySelector(".algorithm-check");e.dataset.algorithm===r?(e.style.borderColor="#4caf50",e.style.background="rgba(76, 175, 80, 0.1)",t&&(t.style.background="#4caf50",t.style.borderColor="#4caf50",t.style.color="white")):(e.style.borderColor="rgba(255, 255, 255, 0.2)",e.style.background="rgba(255, 255, 255, 0.05)",t&&(t.style.background="transparent",t.style.borderColor="rgba(255, 255, 255, 0.3)",t.style.color="transparent"))})}async function V(){try{const r=m.get("selectedDeckId");if(!r){window.showNotification&&window.showNotification("Por favor selecciona un deck primero","warning");return}m.set("selectedAlgorithm",y),k();const e=await d("/api/study/start",{method:"POST",body:JSON.stringify({deck_id:r,algorithm:y})});e.session_id&&(m.set("currentSessionId",e.session_id),window.navigate&&window.navigate("study-session"),window.showNotification&&window.showNotification(`Sesión iniciada con ${Fe(y)}`,"success"))}catch(r){console.error("Error starting study session:",r),window.showNotification&&window.showNotification("Error al iniciar la sesión","error")}}function Fe(r){return{ultra_sm2:"Ultra SM-2",anki:"Anki",fsrs:"FSRS",leitner:"Sistema Leitner",simple:"Repetición Simple"}[r]||r}async function Ae(r,e,t=0){try{const o=m.get("selectedAlgorithm")||"ultra_sm2",n=await d("/api/study/card/answer",{method:"POST",body:JSON.stringify({card_id:r,quality:e,response_time:t,algorithm:o,confidence:e+1})});if(!n.ok&&n.status)throw new Error("Error al evaluar carta");return n}catch(o){throw console.error("Error evaluating card:",o),o}}async function Ce(r,e,t="ultra_sm2"){try{return await d("/api/cards/spaced-repetition",{method:"POST",body:JSON.stringify({card_id:r,quality:e,algorithm:t})})}catch(o){throw console.error("Error updating spaced repetition:",o),o}}function xe(){document.querySelectorAll(".algorithm-option").forEach(o=>{o.addEventListener("click",()=>{const n=o.dataset.algorithm;n&&x(n)})});const r=document.querySelector("#algorithm-modal .close-modal");r&&r.addEventListener("click",k);const e=document.querySelector("#algorithm-modal .start-study-btn");e&&e.addEventListener("click",V);const t=document.getElementById("algorithm-modal");t&&t.addEventListener("click",o=>{o.target===t&&k()})}window.showAlgorithmModal=Le;window.closeAlgorithmModal=k;window.selectModalAlgorithm=x;window.startStudyWithAlgorithm=V;window.evaluateCard=Ae;window.updateSpacedRepetition=Ce;let E=null;async function G(){var o,n,a,i,c;const r=(o=document.getElementById("flashcard-deck"))==null?void 0:o.value,e=(a=(n=document.getElementById("flashcard-front"))==null?void 0:n.value)==null?void 0:a.trim(),t=(c=(i=document.getElementById("flashcard-back"))==null?void 0:i.value)==null?void 0:c.trim();if(!r||!e||!t){s("Por favor, completa todos los campos","error");return}try{(await d("/api/flashcards",{method:"POST",body:JSON.stringify({deck_id:r,front:e,back:t})})).id&&(s("Flashcard creada exitosamente","success"),document.getElementById("flashcard-front").value="",document.getElementById("flashcard-back").value="",window.loadManageData&&window.loadManageData())}catch(u){console.error("Error creating flashcard:",u),s("Error al crear la flashcard","error")}}async function Oe(r){try{const t=await d(`/api/flashcards/${r}`);E=r;const o=document.getElementById("edit-flashcard-front"),n=document.getElementById("edit-flashcard-back");o&&(o.value=t.front||""),n&&(n.value=t.back||"");try{const a=await d("/api/decks"),i=document.getElementById("edit-flashcard-deck");i&&Array.isArray(a)&&(i.innerHTML=a.map(c=>`<option value="${c.id}" ${c.id===t.deck_id?"selected":""}>${c.name}</option>`).join(""))}catch(a){console.error("Error loading decks:",a)}Z()}catch(e){console.error("Error loading flashcard:",e),s("Error al cargar la flashcard","error")}}async function W(){var o,n,a,i,c;if(!E){s("No hay flashcard seleccionada para editar","error");return}const r=(o=document.getElementById("edit-flashcard-deck"))==null?void 0:o.value,e=(a=(n=document.getElementById("edit-flashcard-front"))==null?void 0:n.value)==null?void 0:a.trim(),t=(c=(i=document.getElementById("edit-flashcard-back"))==null?void 0:i.value)==null?void 0:c.trim();if(!r||!e||!t){s("Por favor, completa todos los campos","error");return}try{const u=await d(`/api/flashcards/${E}`,{method:"PUT",body:JSON.stringify({deck_id:r,front:e,back:t})});s("Flashcard actualizada exitosamente","success"),O(),window.loadManageData&&window.loadManageData()}catch(u){console.error("Error updating flashcard:",u),s("Error al actualizar la flashcard","error")}}function Ne(r){window.showConfirmation?window.showConfirmation("Eliminar Flashcard","¿Estás seguro de que quieres eliminar esta flashcard? Esta acción no se puede deshacer.",()=>_(r)):confirm("¿Estás seguro de que quieres eliminar esta flashcard?")&&_(r)}async function _(r){try{await d(`/api/flashcards/${r}`,{method:"DELETE"}),s("Flashcard eliminada exitosamente","success"),window.loadManageData&&window.loadManageData()}catch(e){console.error("Error deleting flashcard:",e),s("Error al eliminar la flashcard","error")}}async function X(r,e=null){try{const t=new URLSearchParams;return r&&t.append("q",r),e&&t.append("deck_id",e),await d(`/api/flashcards/search?${t.toString()}`)}catch(t){return console.error("Error searching flashcards:",t),[]}}function Q(r){const e=document.getElementById("search-results");if(e){if(!r||r.length===0){e.innerHTML='<p class="text-muted">No se encontraron flashcards.</p>';return}e.innerHTML=r.map(t=>`
    <div class="flashcard-result">
      <div class="flashcard-content">
        <div class="flashcard-front">
          <strong>Frente:</strong> ${t.front}
        </div>
        <div class="flashcard-back">
          <strong>Reverso:</strong> ${t.back}
        </div>
        <div class="flashcard-deck">
          <small>Deck: ${t.deck_name||"Sin nombre"}</small>
        </div>
      </div>
      <div class="flashcard-actions">
        <button class="btn btn-sm btn-primary" onclick="editFlashcard(${t.id})">
          Editar
        </button>
        <button class="btn btn-sm btn-danger" onclick="deleteFlashcard(${t.id})">
          Eliminar
        </button>
      </div>
    </div>
  `).join("")}}function Z(){const r=document.getElementById("edit-flashcard-modal");r&&(r.style.display="flex")}function O(){const r=document.getElementById("edit-flashcard-modal");r&&(r.style.display="none"),E=null}function Be(){const r=document.getElementById("create-flashcard-btn");r&&r.addEventListener("click",G);const e=document.getElementById("update-flashcard-btn");e&&e.addEventListener("click",W);const t=document.querySelector("#edit-flashcard-modal .close-modal");t&&t.addEventListener("click",O);const o=document.getElementById("flashcard-search");o&&o.addEventListener("input",window.debounce(async n=>{const a=n.target.value.trim();if(a.length>=2){const i=await X(a);Q(i)}else if(a.length===0){const i=document.getElementById("search-results");i&&(i.innerHTML="")}},300))}window.createFlashcard=G;window.editFlashcard=Oe;window.updateFlashcard=W;window.deleteFlashcard=Ne;window.confirmDeleteFlashcard=_;window.searchFlashcards=X;window.displaySearchResults=Q;window.showEditFlashcardModal=Z;window.hideEditFlashcardModal=O;let h=null,p=null;async function Me(r,e="json"){try{const t=await fetch(`${window.API_BASE||""}/api/decks/${r}/export?format=${e}`,{headers:{Authorization:`Bearer ${localStorage.getItem("authToken")}`}});if(!t.ok)throw new Error("Error al exportar deck");if(e==="csv"){const o=await t.blob();$(o,`deck_${r}.csv`,"text/csv")}else{const o=await t.json(),n=new Blob([JSON.stringify(o,null,2)],{type:"application/json"});$(n,`deck_${r}.json`,"application/json")}s("Deck exportado exitosamente","success")}catch(t){console.error("Error exporting deck:",t),s("Error al exportar el deck","error")}}function $(r,e,t){const o=window.URL.createObjectURL(r),n=document.createElement("a");n.href=o,n.download=e,n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n),window.URL.revokeObjectURL(o)}function ee(r){const e=r.target.files[0];e&&N(e)}function te(r){r.preventDefault(),r.currentTarget.classList.add("dragover")}function re(r){r.preventDefault(),r.currentTarget.classList.remove("dragover")}function oe(r){r.preventDefault(),r.currentTarget.classList.remove("dragover");const e=r.dataTransfer.files;e.length>0&&N(e[0])}async function N(r){try{const e=r.name.split(".").pop().toLowerCase();if(!["json","csv","txt"].includes(e)){s("Formato de archivo no soportado. Use JSON, CSV o TXT","error");return}const t=await Te(r);if(e==="json")try{const o=JSON.parse(t);if(!o.flashcards||!Array.isArray(o.flashcards))throw new Error("Formato JSON inválido");h=o,p="json"}catch{s("Archivo JSON inválido","error");return}else if(e==="csv"){if(t.split(`
`).filter(n=>n.trim()).length<2){s("El archivo CSV debe tener al menos una fila de datos","error");return}h=t,p="csv"}else e==="txt"&&(h=t,p="txt");$e(r.name,e),s(`Archivo ${r.name} cargado exitosamente`,"success")}catch(e){console.error("Error processing file:",e),s("Error al procesar el archivo","error")}}function Te(r){return new Promise((e,t)=>{const o=new FileReader;o.onload=n=>e(n.target.result),o.onerror=n=>t(n),o.readAsText(r)})}function $e(r,e){const t=document.getElementById("import-preview");if(!t)return;let o="",n=0;if(e==="json"&&h)n=h.flashcards?h.flashcards.length:0,o=`
      <div class="import-preview-item">
        <strong>Archivo:</strong> ${r}
      </div>
      <div class="import-preview-item">
        <strong>Formato:</strong> JSON
      </div>
      <div class="import-preview-item">
        <strong>Flashcards:</strong> ${n}
      </div>
    `;else if(e==="csv"&&h){const a=h.split(`
`).filter(i=>i.trim());n=Math.max(0,a.length-1),o=`
      <div class="import-preview-item">
        <strong>Archivo:</strong> ${r}
      </div>
      <div class="import-preview-item">
        <strong>Formato:</strong> CSV
      </div>
      <div class="import-preview-item">
        <strong>Flashcards:</strong> ${n}
      </div>
    `}else if(e==="txt"&&h){const a=h.split(`
`).filter(i=>i.trim());n=Math.floor(a.length/2),o=`
      <div class="import-preview-item">
        <strong>Archivo:</strong> ${r}
      </div>
      <div class="import-preview-item">
        <strong>Formato:</strong> TXT
      </div>
      <div class="import-preview-item">
        <strong>Flashcards estimadas:</strong> ${n}
      </div>
    `}t.innerHTML=o,t.style.display="block"}async function ne(){if(!h||!p){s("Por favor, selecciona un archivo primero","error");return}const r=document.getElementById("import-deck-name"),e=r?r.value.trim():"";if(!e){s("Por favor, ingresa un nombre para el deck importado","error");return}try{if((await d("/api/decks/import",{method:"POST",body:JSON.stringify({content:h,format:p,deck_name:e})})).id){s(`Deck "${e}" importado exitosamente`,"success"),r&&(r.value=""),B(),window.loadManageData&&window.loadManageData();const o=document.getElementById("import-modal");o&&(o.style.display="none")}}catch(t){console.error("Error importing deck:",t),s("Error al importar el deck","error")}}function B(){h=null,p=null;const r=document.getElementById("import-preview");r&&(r.style.display="none",r.innerHTML="");const e=document.getElementById("import-file-input");e&&(e.value="")}async function Pe(r){try{const t=await d(`/api/decks/${r}`),o=document.getElementById("export-options");if(!o)return;o.innerHTML=`
      <div class="export-deck-info">
        <h4>${t.name}</h4>
        <p>${t.description||"Sin descripción"}</p>
        <p><strong>Flashcards:</strong> ${t.flashcard_count||0}</p>
      </div>
      <div class="export-formats">
        <button class="btn btn-primary" onclick="exportDeck(${r}, 'json')">
          Exportar como JSON
        </button>
        <button class="btn btn-secondary" onclick="exportDeck(${r}, 'csv')">
          Exportar como CSV
        </button>
      </div>
    `}catch(e){console.error("Error loading export options:",e),s("Error al cargar opciones de exportación","error")}}function Re(){const r=document.getElementById("import-file-input");r&&r.addEventListener("change",ee);const e=document.getElementById("import-drop-zone");e&&(e.addEventListener("dragover",te),e.addEventListener("dragleave",re),e.addEventListener("drop",oe));const t=document.getElementById("import-deck-btn");t&&t.addEventListener("click",ne);const o=document.getElementById("clear-import-btn");o&&o.addEventListener("click",B)}window.exportDeck=Me;window.importDeck=ne;window.handleFileUpload=ee;window.handleDragOver=te;window.handleDragLeave=re;window.handleFileDrop=oe;window.processImportFile=N;window.loadExportOptions=Pe;window.clearImportData=B;window.importFileContent=h;window.importFileFormat=p;document.addEventListener("DOMContentLoaded",()=>{console.log("FlashCards App initialized"),Y(),xe(),Be(),Re(),j(),"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(r=>{console.log("SW registered: ",r)}).catch(r=>{console.log("SW registration failed: ",r)})});
