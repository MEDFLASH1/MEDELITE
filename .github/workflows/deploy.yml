name: Deploy

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build frontend
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: ${{ secrets.CUSTOM_DOMAIN }}  # Optional: if you have a custom domain
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Frontend deployed successfully to GitHub Pages"
        echo "üåê URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

  deploy-backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        # Add your migration commands here
        # flask db upgrade
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        FLASK_ENV: production
    
    - name: Deploy to Railway (or your preferred platform)
      run: |
        echo "Deploying backend to production..."
        # Add your deployment commands here
        # This could be Railway, Render, Heroku, etc.
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}  # If using Railway
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}  # If using Render
    
    - name: Health check
      run: |
        echo "Performing health check..."
        # Add health check commands
        # curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Backend deployed successfully"
        echo "üöÄ API URL: ${{ secrets.BACKEND_URL }}"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-frontend.result }}" == "success" && "${{ needs.deploy-backend.result }}" == "success" ]]; then
          echo "üéâ Deployment completed successfully!"
          echo "Frontend: ‚úÖ Deployed"
          echo "Backend: ‚úÖ Deployed"
        else
          echo "‚ùå Deployment failed"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo "Backend: ${{ needs.deploy-backend.result }}"
        fi
    
    # Optional: Send notification to Slack, Discord, etc.
    - name: Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment Status:
          Frontend: ${{ needs.deploy-frontend.result }}
          Backend: ${{ needs.deploy-backend.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Optional

