name: Enterprise Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    
    outputs:
      deploy-ready: ${{ steps.validation.outputs.ready }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @eslint/js
    
    - name: Run critical tests
      id: tests
      run: |
        echo "🧪 Running critical pre-deployment tests..."
        
        # Syntax validation
        for file in $(find . -name "*.js" -not -path "./node_modules/*"); do
          node -c "$file" || exit 1
        done
        
        # Linting (allow warnings but not errors)
        npx eslint . --ext .js --max-warnings 20 || exit 1
        
        echo "✅ All critical tests passed"
        echo "tests-passed=true" >> $GITHUB_OUTPUT
    
    - name: Security scan
      run: |
        echo "🔒 Security pre-deployment scan..."
        
        # Check for secrets
        if grep -ri "password.*=\|api.*key.*=\|secret.*=" --include="*.js" --exclude-dir=node_modules . | grep -v "placeholder\|example\|test"; then
          echo "❌ Potential secrets found in code"
          exit 1
        fi
        
        # Check for eval
        if grep -r "eval(" --include="*.js" --exclude-dir=node_modules .; then
          echo "❌ eval() usage found - security risk"
          exit 1
        fi
        
        echo "✅ Security scan passed"
    
    - name: Generate version
      id: version
      run: |
        VERSION=$(date +%Y.%m.%d.%H%M)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Validation summary
      id: validation
      run: |
        echo "ready=true" >> $GITHUB_OUTPUT
        echo "✅ Pre-deployment validation completed successfully"

  build-and-optimize:
    name: Build & Optimization
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deploy-ready == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build optimization
      run: |
        echo "🔨 Building and optimizing..."
        
        # Run build if configured
        npm run build || echo "No build script configured"
        
        # Optimize images (if tools available)
        echo "🖼️ Image optimization..."
        find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | head -5
        
        # Minify CSS (basic)
        echo "🎨 CSS optimization..."
        for css_file in $(find . -name "*.css" -not -path "./node_modules/*"); do
          if [ -f "$css_file" ]; then
            echo "Optimizing $css_file"
            # Basic CSS minification (remove comments and extra spaces)
            sed 's|/\*.*\*/||g; s/  */ /g; s/^ *//; s/ *$//; /^$/d' "$css_file" > "${css_file}.min"
            mv "${css_file}.min" "$css_file"
          fi
        done
    
    - name: Generate deployment manifest
      run: |
        echo "📋 Generating deployment manifest..."
        cat > deployment-manifest.json << EOF
        {
          "version": "${{ needs.pre-deployment-checks.outputs.version }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "environment": "${{ github.event.inputs.environment || 'production' }}",
          "files": {
            "html": $(find . -name "*.html" -not -path "./node_modules/*" | wc -l),
            "js": $(find . -name "*.js" -not -path "./node_modules/*" | wc -l),
            "css": $(find . -name "*.css" -not -path "./node_modules/*" | wc -l)
          }
        }
        EOF
        
        echo "Deployment manifest:"
        cat deployment-manifest.json
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ needs.pre-deployment-checks.outputs.version }}
        path: |
          .
          !node_modules/
          !.git/
          !.github/
        retention-days: 30

  deploy-to-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-optimize]
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ needs.pre-deployment-checks.outputs.version }}
        path: ./build
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Prepare deployment
      run: |
        echo "🚀 Preparing deployment..."
        
        # Copy build files
        cp -r build/* . || echo "No build directory found, using current files"
        
        # Remove sensitive files
        rm -rf .github/workflows/*.disabled
        rm -f workflow_errors.md
        rm -rf backend_app/
        rm -rf tests/
        rm -rf venv/
        rm -rf __pycache__/
        rm -f *.py
        rm -f requirements*.txt
        rm -f pytest.ini
        
        # Ensure critical files exist
        if [ ! -f "index.html" ]; then
          echo "❌ index.html not found"
          exit 1
        fi
        
        echo "✅ Deployment prepared"
    
    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-to-pages]
    if: always()
    
    steps:
    - name: Verify deployment
      run: |
        echo "🔍 Post-deployment verification..."
        
        # Wait for deployment to be available
        sleep 30
        
        # Basic connectivity test
        SITE_URL="${{ steps.deployment.outputs.page_url || 'https://matraca130.github.io/FLASHCARD/' }}"
        echo "Testing site: $SITE_URL"
        
        # Check if site responds
        if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" | grep -q "200"; then
          echo "✅ Site is accessible"
        else
          echo "⚠️ Site may not be fully available yet"
        fi
    
    - name: Performance check
      run: |
        echo "⚡ Basic performance check..."
        
        SITE_URL="${{ steps.deployment.outputs.page_url || 'https://matraca130.github.io/FLASHCARD/' }}"
        
        # Measure response time
        response_time=$(curl -o /dev/null -s -w "%{time_total}" "$SITE_URL")
        echo "Response time: ${response_time}s"
        
        # Check if response time is reasonable
        if (( $(echo "$response_time < 3.0" | bc -l) )); then
          echo "✅ Good response time"
        else
          echo "⚠️ Slow response time"
        fi
    
    - name: Deployment summary
      run: |
        echo "📊 Deployment Summary"
        echo "===================="
        echo "Version: ${{ needs.pre-deployment-checks.outputs.version }}"
        echo "Commit: ${{ github.sha }}"
        echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "Status: ${{ job.status }}"
        echo "URL: ${{ steps.deployment.outputs.page_url || 'https://matraca130.github.io/FLASHCARD/' }}"
        
        if [ "${{ needs.deploy-to-pages.result }}" = "success" ]; then
          echo "🎉 Deployment completed successfully!"
        else
          echo "❌ Deployment failed"
        fi

  rollback:
    name: Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Rollback notification
      run: |
        echo "🔄 Rollback procedure would be initiated here"
        echo "Manual intervention may be required"
        echo "Check previous successful deployment artifacts"

