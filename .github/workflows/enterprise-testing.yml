name: Enterprise Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend-tests:
    name: Frontend Testing & Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @eslint/js

    - name: Syntax validation
      run: |
        echo "üîç Validating JavaScript syntax..."

        # Check all JS files for syntax errors
        for file in $(find . -name "*.js" -not -path "./node_modules/*"); do
          echo "Checking $file..."
          node -c "$file" || exit 1
        done

        echo "‚úÖ All JavaScript files have valid syntax"

    - name: Linting
      run: |
        echo "üìù Running ESLint..."
        npm run lint 2>&1 | python -c "
        import sys
        import re
        
        # Filtrar solo errores reales de ESLint
        for line in sys.stdin:
            line = line.strip()
            if any(keyword in line.lower() for keyword in ['error', 'warning']):
                # Solo mostrar si es un error real de linting
                if any(pattern in line.lower() for pattern in ['‚úñ', 'problems', 'errors', 'warnings']):
                    print(line)
                elif re.search(r'\d+:\d+\s+(error|warning)', line):
                    print(line)
            else:
                print(line)
        " || exit 1

    - name: Frontend tests
      run: |
        echo "üß™ Running frontend tests..."
        if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
          npm test
        else
          echo "‚ö†Ô∏è No test script found in package.json"
        fi

    - name: Build test
      run: |
        echo "üî® Testing build process..."
        if [ -f "package.json" ] && grep -q "\"build\"" package.json; then
          npm run build
        else
          echo "‚ö†Ô∏è No build script found in package.json"
        fi

    - name: Performance analysis
      run: |
        echo "‚ö° Performance analysis..."

        # Bundle size analysis
        if [ -d "dist" ] || [ -d "build" ]; then
          echo "üì¶ Bundle size analysis:"
          du -sh dist/ build/ 2>/dev/null || echo "No build directory found"
        fi

        # File size analysis
        echo "üìä Performance analysis..."

        # Total bundle size
        total_size=$(find . -name "*.js" -not -path "./node_modules/*" -exec cat {} \; | wc -c)
        echo "Total JavaScript size: $total_size bytes"

        # Individual file sizes
        echo "Large files (>50KB):"
        find . -name "*.js" -not -path "./node_modules/*" -size +50k -exec ls -lh {} \;

        # CSS size
        css_size=$(find . -name "*.css" -exec cat {} \; | wc -c)
        echo "Total CSS size: $css_size bytes"

        # HTML size
        if [ -f "index.html" ]; then
          html_size=$(wc -c < index.html)
          echo "HTML size: $html_size bytes"

          if [ $html_size -gt 500000 ]; then
            echo "‚ö†Ô∏è HTML file is very large (>500KB)"
          fi
        fi

    - name: Complexity analysis
      run: |
        echo "üßÆ Code complexity analysis..."

        # Function complexity (rough estimate)
        complex_functions=$(grep -r "if.*if.*if\|for.*for\|while.*while" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Potentially complex functions: $complex_functions"

        # Nested callbacks
        nested_callbacks=$(grep -r "function.*function.*function" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Deeply nested functions: $nested_callbacks"

  browser-compatibility:
    name: Browser Compatibility Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Modern JavaScript features check
      run: |
        echo "üåê Browser compatibility analysis..."

        # Check for modern JS features that might need polyfills
        if grep -r "async\|await\|=>" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ Modern JavaScript features detected"
        fi

        # Check for ES6+ features
        if grep -r "const\|let\|class\|import\|export" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ ES6+ features detected"
        fi

        # Check for potential IE compatibility issues
        if grep -r "fetch\|Promise\|Map\|Set" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Features that may need polyfills for older browsers"
        fi

  accessibility-tests:
    name: Accessibility Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Accessibility audit
      run: |
        echo "‚ôø Accessibility analysis..."

        # Check for alt attributes
        if grep -r "img.*alt=" --include="*.html" .; then
          echo "‚úÖ Alt attributes found"
        else
          echo "‚ö†Ô∏è No alt attributes detected"
        fi

        # Check for ARIA labels
        if grep -r "aria-" --include="*.html" --include="*.js" .; then
          echo "‚úÖ ARIA attributes found"
        else
          echo "‚ö†Ô∏è No ARIA attributes detected"
        fi

        # Check for semantic HTML
        if grep -r "<nav\|<main\|<section\|<article\|<header\|<footer" --include="*.html" .; then
          echo "‚úÖ Semantic HTML elements found"
        else
          echo "‚ö†Ô∏è Limited semantic HTML detected"
        fi

  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Performance audit
      run: |
        echo "‚ö° Performance analysis..."

        # Check for performance anti-patterns
        if grep -r "document.getElementById.*loop\|querySelector.*loop" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Potential DOM query performance issues"
        else
          echo "‚úÖ No obvious DOM performance issues"
        fi

        # Check for large images
        if find . -name "*.jpg" -o -name "*.png" -o -name "*.gif" | xargs ls -la 2>/dev/null | awk '$5 > 1000000'; then
          echo "‚ö†Ô∏è Large images detected (>1MB)"
        else
          echo "‚úÖ No excessively large images"
        fi

        # Check for unused CSS
        echo "üìä CSS analysis..."
        css_files=$(find . -name "*.css" | wc -l)
        echo "CSS files: $css_files"

        # Check for inline styles
        if grep -r "style=" --include="*.html" --include="*.js" .; then
          echo "‚ö†Ô∏è Inline styles detected"
        else
          echo "‚úÖ No inline styles detected"
        fi

  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üîí Security scan
      run: |
        echo "üîí Security pre-deployment scan..."
        # Escanear SOLO archivos fuente, NO el JS minificado
        git ls-files '*.js' ':!:dist/**' ':!:index-*' \
          | xargs grep -i -E "api.*key\s*=" -n \
          | grep -v "placeholder|example|test" && {
              echo "‚ùå Potential API keys found in code"
              exit 1
          } || echo "‚úÖ Security scan passed"

    - name: Content Security Policy check
      run: |
        echo "üõ°Ô∏è CSP analysis..."

        if grep -r "Content-Security-Policy\|CSP" --include="*.html" .; then
          echo "‚úÖ CSP headers found"
        else
          echo "‚ö†Ô∏è No CSP headers detected"
        fi

  scalability-tests:
    name: Scalability Assessment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Architecture analysis
      run: |
        echo "üèóÔ∏è Scalability analysis..."

        # Check for modular structure
        if [ -d "components" ] || [ -d "modules" ] || [ -d "services" ]; then
          echo "‚úÖ Modular architecture detected"
        else
          echo "‚ö†Ô∏è Consider implementing modular architecture"
        fi

        # Check for configuration management
        if [ -f ".env.example" ] || [ -f "config.js" ] || [ -f "config.json" ]; then
          echo "‚úÖ Configuration management found"
        else
          echo "‚ö†Ô∏è Consider implementing configuration management"
        fi

        # Check for API abstraction
        if grep -r "fetch\|axios\|api" --include="*.js" --exclude-dir=node_modules . | head -5; then
          echo "‚úÖ API calls detected"
        fi

        # Database analysis
        if grep -r "localStorage\|sessionStorage\|indexedDB" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ Client-side storage detected"
        fi

        # Check for state management
        if grep -r "state\|store\|reducer" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ State management patterns detected"
        fi

  backend-tests:
    name: Backend Testing & Validation
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -r requirements-monitoring.txt

    - name: Install project in editable mode
      run: |
        pip install -e .

    - name: Set up environment variables for testing
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        # No configurar DATABASE_URL para usar SQLite por defecto

    - name: Run backend linting
      run: |
        pip install flake8
        # Solo errores cr√≠ticos que pueden romper funcionalidad
        flake8 backend_app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Linting completo pero sin fallar el build por warnings menores
        flake8 backend_app --count --exit-zero --max-complexity=20 --max-line-length=130 --ignore=E722,E402,W503,C901,E501 --statistics

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=backend_app --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  api-tests:
    name: API Testing
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: API endpoint analysis
      run: |
        echo "üîå API analysis..."

        # Check for API routes
        if grep -r "route\|endpoint\|api" --include="*.py" --exclude-dir=__pycache__ backend_app/ | head -10; then
          echo "‚úÖ API endpoints detected"
        fi

        # Check for API documentation
        if grep -r "swagger\|openapi\|@api" --include="*.py" --exclude-dir=__pycache__ .; then
          echo "‚úÖ API documentation found"
        else
          echo "‚ö†Ô∏è Consider adding API documentation"
        fi

        # Check for error handling
        if grep -r "try:\|except\|raise" --include="*.py" --exclude-dir=__pycache__ backend_app/ | head -5; then
          echo "‚úÖ Error handling detected"
        fi

        # Check for validation
        if grep -r "validate\|schema" --include="*.py" --exclude-dir=__pycache__ backend_app/ | head -5; then
          echo "‚úÖ Input validation detected"
        fi

        # Check for authentication
        if grep -r "auth\|jwt\|token" --include="*.py" --exclude-dir=__pycache__ backend_app/ | head -5; then
          echo "‚úÖ Authentication mechanisms detected"
        fi

        # Check for rate limiting
        if grep -r "limit\|throttle" --include="*.py" --exclude-dir=__pycache__ backend_app/ | head -5; then
          echo "‚úÖ Rate limiting detected"
        else
          echo "‚ö†Ô∏è Consider implementing rate limiting"
        fi

        # API calls
        api_calls=$(grep -r "fetch(\|XMLHttpRequest" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "API calls: $api_calls"

  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Integration analysis
      run: |
        echo "üîó Integration analysis..."

        # Check for frontend-backend integration
        if grep -r "localhost:\|127.0.0.1\|api/" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ Frontend-backend integration detected"
        fi

        # Check for CORS configuration
        if grep -r "CORS\|cors" --include="*.py" --include="*.js" .; then
          echo "‚úÖ CORS configuration found"
        else
          echo "‚ö†Ô∏è CORS configuration not detected"
        fi

        # Check for environment configuration
        if [ -f ".env.example" ]; then
          echo "‚úÖ Environment configuration template found"
        else
          echo "‚ö†Ô∏è Consider adding .env.example"
        fi

        # Database integration
        if grep -r "database\|db\|sql" --include="*.py" --exclude-dir=__pycache__ .; then
          echo "‚úÖ Database integration detected"
        fi

