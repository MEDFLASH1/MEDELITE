name: Enterprise Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write

jobs:
  frontend-tests:
    name: Frontend Testing & Validation
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @eslint/js

    - name: Syntax validation
      run: |
        echo "🔍 Validating JavaScript syntax..."

        # Check all JS files for syntax errors
        for file in $(find . -name "*.js" -not -path "./node_modules/*"); do
          echo "Checking $file..."
          node -c "$file" || exit 1
        done

        echo "✅ All JavaScript files have valid syntax"

    - name: Linting
      run: |
        echo "🔍 Running ESLint..."
        npm run lint

    - name: Build validation
      run: |
        echo "🔨 Building project..."
        npm run build

    - name: Unit tests (if configured)
      run: |
        echo "🧪 Running unit tests..."
        npm test || echo "Tests not configured, skipping..."
      continue-on-error: true

    - name: Integration tests
      run: |
        echo "🔗 Running integration tests..."

        # Test critical functions exist
        if grep -q "showSection" *.js; then
          echo "✅ Navigation functions found"
        else
          echo "❌ Navigation functions missing"
          exit 1
        fi

        # Test API client exists
        if [ -f "apiClient.js" ]; then
          echo "✅ API client found"
        else
          echo "⚠️ API client not found"
        fi

        # Test service files
        service_count=$(find . -name "*.service.js" | wc -l)
        echo "Service files found: $service_count"

  performance-tests:
    name: Performance & Load Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: File size analysis
      run: |
        echo "📊 Performance analysis..."

        # Total bundle size
        total_size=$(find . -name "*.js" -not -path "./node_modules/*" -exec cat {} \; | wc -c)
        echo "Total JavaScript size: $total_size bytes"

        # Individual file sizes
        echo "Large files (>50KB):"
        find . -name "*.js" -not -path "./node_modules/*" -size +50k -exec ls -lh {} \;

        # CSS size
        css_size=$(find . -name "*.css" -exec cat {} \; | wc -c)
        echo "Total CSS size: $css_size bytes"

        # HTML size
        if [ -f "index.html" ]; then
          html_size=$(wc -c < index.html)
          echo "HTML size: $html_size bytes"

          if [ $html_size -gt 500000 ]; then
            echo "⚠️ HTML file is very large (>500KB)"
          fi
        fi

    - name: Complexity analysis
      run: |
        echo "🧮 Code complexity analysis..."

        # Function complexity (rough estimate)
        complex_functions=$(grep -r "if.*if.*if\|for.*for\|while.*while" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Potentially complex functions: $complex_functions"

        # Nested callbacks
        nested_callbacks=$(grep -r "function.*function.*function" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Deeply nested functions: $nested_callbacks"

  browser-compatibility:
    name: Browser Compatibility Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Modern JavaScript features check
      run: |
        echo "🌐 Browser compatibility analysis..."

        # Check for modern features that might need polyfills
        if grep -r "async\|await" --include="*.js" --exclude-dir=node_modules .; then
          echo "✅ Uses modern async/await"
        fi

        if grep -r "const\|let" --include="*.js" --exclude-dir=node_modules .; then
          echo "✅ Uses modern variable declarations"
        fi

        if grep -r "=>" --include="*.js" --exclude-dir=node_modules .; then
          echo "✅ Uses arrow functions"
        fi

        # Check for potential compatibility issues
        if grep -r "fetch(" --include="*.js" --exclude-dir=node_modules .; then
          echo "⚠️ Uses fetch API (may need polyfill for older browsers)"
        fi

        if grep -r "localStorage\|sessionStorage" --include="*.js" --exclude-dir=node_modules .; then
          echo "✅ Uses web storage APIs"
        fi

  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Security vulnerability scan
      run: |
        echo "🔒 Security analysis..."

        # Check for XSS vulnerabilities
        if grep -r "innerHTML\|outerHTML" --include="*.js" --exclude-dir=node_modules .; then
          echo "⚠️ Potential XSS risk: innerHTML usage found"
        fi

        # Check for eval usage
        if grep -r "eval(" --include="*.js" --exclude-dir=node_modules .; then
          echo "❌ Security risk: eval() usage found"
          exit 1
        else
          echo "✅ No eval() usage found"
        fi

        # Check for document.write
        if grep -r "document.write" --include="*.js" --exclude-dir=node_modules .; then
          echo "⚠️ Potential security risk: document.write usage"
        fi

        # Check for hardcoded credentials
        if grep -ri "password.*=\|api.*key.*=\|secret.*=" --include="*.js" --exclude-dir=node_modules . | grep -v "placeholder\|example"; then
          echo "❌ Potential hardcoded credentials found"
          exit 1
        else
          echo "✅ No hardcoded credentials detected"
        fi

    - name: Content Security Policy check
      run: |
        echo "🛡️ CSP analysis..."

        if grep -r "Content-Security-Policy\|CSP" --include="*.html" .; then
          echo "✅ CSP headers found"
        else
          echo "⚠️ No CSP headers detected"
        fi

  scalability-tests:
    name: Scalability Assessment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Architecture analysis
      run: |
        echo "🏗️ Scalability analysis..."

        # Service architecture
        service_files=$(find . -name "*.service.js" | wc -l)
        echo "Service modules: $service_files"

        # Modular structure
        if [ $service_files -gt 5 ]; then
          echo "✅ Good modular architecture"
        else
          echo "⚠️ Consider more modular architecture for scalability"
        fi

        # Check for global variables
        global_vars=$(grep -r "window\." --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Global variable usage: $global_vars"

        if [ $global_vars -gt 10 ]; then
          echo "⚠️ High global variable usage may impact scalability"
        fi

        # Check for memory leaks patterns
        if grep -r "setInterval\|setTimeout" --include="*.js" --exclude-dir=node_modules . | grep -v "clear"; then
          echo "⚠️ Potential memory leaks: uncleaned timers"
        fi

    - name: Performance bottleneck detection
      run: |
        echo "⚡ Performance bottleneck analysis..."

        # DOM manipulation patterns
        dom_queries=$(grep -r "getElementById\|querySelector" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "DOM queries: $dom_queries"

        # Event listeners
        event_listeners=$(grep -r "addEventListener" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Event listeners: $event_listeners"

        # AJAX/Fetch calls
        api_calls=$(grep -r "fetch(\|XMLHttpRequest" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "API calls: $api_calls"


  backend-tests:
    name: Backend Testing & Validation
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -r requirements-monitoring.txt

    - name: Set up environment variables for testing
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        # No configurar DATABASE_URL para usar SQLite por defecto

    - name: Run backend linting
      run: |
        pip install flake8
        flake8 backend_app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend_app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=backend_app --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v

