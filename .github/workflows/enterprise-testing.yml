name: Enterprise Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write

jobs:
  frontend-tests:
    name: Frontend Testing & Validation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @eslint/js
    
    - name: Syntax validation
      run: |
        echo "üîç Validating JavaScript syntax..."
        
        # Check all JS files for syntax errors
        for file in $(find . -name "*.js" -not -path "./node_modules/*"); do
          echo "Checking $file..."
          node -c "$file" || exit 1
        done
        
        echo "‚úÖ All JavaScript files have valid syntax"
    
    - name: Linting
      run: |
        echo "üîç Running ESLint..."
        npx eslint . --ext .js --max-warnings 10
    
    - name: Build validation
      run: |
        echo "üî® Validating build process..."
        npm run build || echo "Build script not configured, skipping..."
    
    - name: Unit tests (if configured)
      run: |
        echo "üß™ Running unit tests..."
        npm test || echo "Tests not configured, skipping..."
      continue-on-error: true
    
    - name: Integration tests
      run: |
        echo "üîó Running integration tests..."
        
        # Test critical functions exist
        if grep -q "showSection" *.js; then
          echo "‚úÖ Navigation functions found"
        else
          echo "‚ùå Navigation functions missing"
          exit 1
        fi
        
        # Test API client exists
        if [ -f "apiClient.js" ]; then
          echo "‚úÖ API client found"
        else
          echo "‚ö†Ô∏è API client not found"
        fi
        
        # Test service files
        service_count=$(find . -name "*.service.js" | wc -l)
        echo "Service files found: $service_count"

  performance-tests:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: File size analysis
      run: |
        echo "üìä Performance analysis..."
        
        # Total bundle size
        total_size=$(find . -name "*.js" -not -path "./node_modules/*" -exec cat {} \; | wc -c)
        echo "Total JavaScript size: $total_size bytes"
        
        # Individual file sizes
        echo "Large files (>50KB):"
        find . -name "*.js" -not -path "./node_modules/*" -size +50k -exec ls -lh {} \;
        
        # CSS size
        css_size=$(find . -name "*.css" -exec cat {} \; | wc -c)
        echo "Total CSS size: $css_size bytes"
        
        # HTML size
        if [ -f "index.html" ]; then
          html_size=$(wc -c < index.html)
          echo "HTML size: $html_size bytes"
          
          if [ $html_size -gt 500000 ]; then
            echo "‚ö†Ô∏è HTML file is very large (>500KB)"
          fi
        fi
    
    - name: Complexity analysis
      run: |
        echo "üßÆ Code complexity analysis..."
        
        # Function complexity (rough estimate)
        complex_functions=$(grep -r "if.*if.*if\|for.*for\|while.*while" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Potentially complex functions: $complex_functions"
        
        # Nested callbacks
        nested_callbacks=$(grep -r "function.*function.*function" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Deeply nested functions: $nested_callbacks"

  browser-compatibility:
    name: Browser Compatibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Modern JavaScript features check
      run: |
        echo "üåê Browser compatibility analysis..."
        
        # Check for modern features that might need polyfills
        if grep -r "async\|await" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ Uses modern async/await"
        fi
        
        if grep -r "const\|let" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ Uses modern variable declarations"
        fi
        
        if grep -r "=>" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ Uses arrow functions"
        fi
        
        # Check for potential compatibility issues
        if grep -r "fetch(" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Uses fetch API (may need polyfill for older browsers)"
        fi
        
        if grep -r "localStorage\|sessionStorage" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚úÖ Uses web storage APIs"
        fi

  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Security vulnerability scan
      run: |
        echo "üîí Security analysis..."
        
        # Check for XSS vulnerabilities
        if grep -r "innerHTML\|outerHTML" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Potential XSS risk: innerHTML usage found"
        fi
        
        # Check for eval usage
        if grep -r "eval(" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ùå Security risk: eval() usage found"
          exit 1
        else
          echo "‚úÖ No eval() usage found"
        fi
        
        # Check for document.write
        if grep -r "document.write" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Potential security risk: document.write usage"
        fi
        
        # Check for hardcoded credentials
        if grep -ri "password.*=\|api.*key.*=\|secret.*=" --include="*.js" --exclude-dir=node_modules . | grep -v "placeholder\|example"; then
          echo "‚ùå Potential hardcoded credentials found"
          exit 1
        else
          echo "‚úÖ No hardcoded credentials detected"
        fi
    
    - name: Content Security Policy check
      run: |
        echo "üõ°Ô∏è CSP analysis..."
        
        if grep -r "Content-Security-Policy\|CSP" --include="*.html" .; then
          echo "‚úÖ CSP headers found"
        else
          echo "‚ö†Ô∏è No CSP headers detected"
        fi

  scalability-tests:
    name: Scalability Assessment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Architecture analysis
      run: |
        echo "üèóÔ∏è Scalability analysis..."
        
        # Service architecture
        service_files=$(find . -name "*.service.js" | wc -l)
        echo "Service modules: $service_files"
        
        # Modular structure
        if [ $service_files -gt 5 ]; then
          echo "‚úÖ Good modular architecture"
        else
          echo "‚ö†Ô∏è Consider more modular architecture for scalability"
        fi
        
        # Check for global variables
        global_vars=$(grep -r "window\." --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Global variable usage: $global_vars"
        
        if [ $global_vars -gt 10 ]; then
          echo "‚ö†Ô∏è High global variable usage may impact scalability"
        fi
        
        # Check for memory leaks patterns
        if grep -r "setInterval\|setTimeout" --include="*.js" --exclude-dir=node_modules . | grep -v "clear"; then
          echo "‚ö†Ô∏è Potential memory leaks: uncleaned timers"
        fi
    
    - name: Performance bottleneck detection
      run: |
        echo "‚ö° Performance bottleneck analysis..."
        
        # DOM manipulation patterns
        dom_queries=$(grep -r "getElementById\|querySelector" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "DOM queries: $dom_queries"
        
        # Event listeners
        event_listeners=$(grep -r "addEventListener" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "Event listeners: $event_listeners"
        
        # AJAX/Fetch calls
        api_calls=$(grep -r "fetch(\|XMLHttpRequest" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "API calls: $api_calls"

