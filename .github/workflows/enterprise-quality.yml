name: Enterprise Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  frontend-quality:
    name: Frontend Quality & Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @eslint/js

    - name: Run ESLint (Modern Config)
      run: |
        npm run lint --format=json --output-file=eslint-report.json || true
        npm run lint
      continue-on-error: true

    - name: Run Prettier check
      run: |
        npm run format:check || echo "‚ö†Ô∏è Formatting issues found"
      continue-on-error: true

    - name: Security scan - Frontend
      run: |
        echo "üîç Scanning for security issues..."
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key\|token" --include="*.js" --include="*.html" --exclude-dir=node_modules . | grep -v "placeholder\|example\|test"; then
          echo "‚ö†Ô∏è Potential secrets found"
        else
          echo "‚úÖ No obvious secrets detected"
        fi

        # Check for dangerous functions
        if grep -r "eval\|innerHTML\|document.write" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Potentially dangerous functions found"
        else
          echo "‚úÖ No dangerous functions detected"
        fi

    - name: Bundle size analysis
      run: |
        echo "üìä Analyzing bundle sizes..."
        find . -name "*.js" -not -path "./node_modules/*" -exec wc -c {} + | sort -n

        # Check for large files
        large_files=$(find . -name "*.js" -not -path "./node_modules/*" -size +100k)
        if [ -n "$large_files" ]; then
          echo "‚ö†Ô∏è Large JavaScript files found:"
          echo "$large_files"
        else
          echo "‚úÖ No oversized JavaScript files"
        fi

    - name: Performance checks
      run: |
        echo "‚ö° Performance analysis..."
        # Check for performance anti-patterns
        if grep -r "document.getElementById.*loop\|querySelector.*loop" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Potential DOM query performance issues"
        else
          echo "‚úÖ No obvious DOM performance issues"
        fi

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-quality-reports
        path: |
          eslint-report.json
        retention-days: 30

  dependency-security:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check for outdated packages
      run: |
        echo "üì¶ Checking for outdated packages..."
        npm outdated || echo "Some packages may be outdated"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          npm-audit.json
        retention-days: 30

  code-metrics:
    name: Code Metrics & Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Code complexity analysis
      run: |
        echo "üìà Code metrics analysis..."

        # Count lines of code
        echo "Lines of code:"
        find . -name "*.js" -not -path "./node_modules/*" | xargs wc -l | tail -1

        # Count files
        echo "JavaScript files:"
        find . -name "*.js" -not -path "./node_modules/*" | wc -l

        # Function count
        echo "Function definitions:"
        grep -r "function\|=>" --include="*.js" --exclude-dir=node_modules . | wc -l

    - name: Documentation check
      run: |
        echo "üìö Documentation analysis..."

        # Check README
        if [ -f "README.md" ] && [ -s "README.md" ]; then
          echo "‚úÖ README.md exists and has content"
          wc -w README.md
        else
          echo "‚ö†Ô∏è README.md missing or empty"
        fi

        # Check for JSDoc comments
        jsdoc_count=$(grep -r "/\*\*" --include="*.js" --exclude-dir=node_modules . | wc -l)
        echo "JSDoc comments found: $jsdoc_count"

        # Check for TODO/FIXME
        todo_count=$(grep -r "TODO\|FIXME\|HACK" --include="*.js" --include="*.html" --exclude-dir=node_modules . | wc -l)
        echo "TODO/FIXME items: $todo_count"

  accessibility-check:
    name: Accessibility & SEO
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: HTML validation
      run: |
        echo "üîç HTML accessibility checks..."

        # Check for alt attributes
        if grep -r "<img" --include="*.html" . | grep -v "alt="; then
          echo "‚ö†Ô∏è Images without alt attributes found"
        else
          echo "‚úÖ All images have alt attributes"
        fi

        # Check for semantic HTML
        if grep -r "<div.*button\|<span.*button" --include="*.html" .; then
          echo "‚ö†Ô∏è Non-semantic button elements found"
        else
          echo "‚úÖ Semantic button elements used"
        fi

        # Check for ARIA labels
        aria_count=$(grep -r "aria-label\|aria-describedby" --include="*.html" . | wc -l)
        echo "ARIA attributes found: $aria_count"

    - name: SEO checks
      run: |
        echo "üîç SEO analysis..."

        # Check meta tags
        if grep -r "<meta.*description" --include="*.html" .; then
          echo "‚úÖ Meta description found"
        else
          echo "‚ö†Ô∏è Meta description missing"
        fi

        # Check title tags
        if grep -r "<title>" --include="*.html" .; then
          echo "‚úÖ Title tags found"
        else
          echo "‚ö†Ô∏è Title tags missing"
        fi

