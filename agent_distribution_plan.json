{
  "priority_groups": [
    {
      "group_id": 1,
      "priority": "MEDIA - Múltiples archivos en backup",
      "backup_files": [
        {
          "path": "./backup_js/algorithms.service.js",
          "size": 12600,
          "lines": 448,
          "hash": "4feeedb3e0e7d74bcb3db3c85b9f3569",
          "functions": [
            "export function showAlgorithmModal",
            "setTimeout",
            "createAlgorithmModal",
            "export function closeAlgorithmModal",
            "export function selectModalAlgorithm",
            "document.querySelectorAll",
            "updateAlgorithmDetails",
            "formatParamName",
            "export async function confirmAlgorithmSelection",
            "Object.keys",
            "} catch",
            "export async function saveAlgorithmConfig",
            "api",
            "} catch",
            "export async function loadAlgorithmConfig",
            "const config = await apiWithFallback",
            "} catch",
            "updateAlgorithmDisplay",
            "export async function calculateNextInterval",
            "api",
            "body: JSON.stringify",
            "} catch",
            "calculateSimpleInterval",
            "} else if",
            "export async function getAlgorithmStats",
            "const stats = await apiWithFallback",
            "} catch"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { apiWithFallback, performCrudOperation } from './utils/apiHelpers.js';",
            "import { showNotification } from './utils/helpers.js';"
          ],
          "exports": [
            "export function showAlgorithmModal() {",
            "export function closeAlgorithmModal() {",
            "export function selectModalAlgorithm(algorithmId) {",
            "export async function confirmAlgorithmSelection() {",
            "export async function saveAlgorithmConfig(algorithmId, params) {",
            "export async function loadAlgorithmConfig() {",
            "export async function calculateNextInterval(cardData, quality) {",
            "export async function getAlgorithmStats() {"
          ]
        },
        {
          "path": "./backup_js/auth.service.js",
          "size": 4040,
          "lines": 161,
          "hash": "fe60f6442a32e099ead761fe35ebd928",
          "functions": [
            "export async function checkAuthStatus",
            "} catch",
            "export async function login",
            "api",
            "} catch",
            "export async function register",
            "api",
            "} catch",
            "export function logout",
            "clearAuthData",
            "export function getAuthToken",
            "export function isAuthenticated",
            "export function getCurrentUser"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { loadDashboardData } from './dashboard.service.js';",
            "import {",
            "import { performCrudOperation } from './utils/apiHelpers.js';",
            "import { showNotification } from './utils/helpers.js';"
          ],
          "exports": [
            "export async function checkAuthStatus() {",
            "export async function login(email, password) {",
            "export async function register(email, password, confirmPassword, name = '') {",
            "export function logout() {",
            "export function getAuthToken() {",
            "export function isAuthenticated() {",
            "export function getCurrentUser() {"
          ]
        }
      ],
      "main_files": [],
      "total_files": 2
    },
    {
      "group_id": 2,
      "priority": "MEDIA - Múltiples archivos en backup",
      "backup_files": [
        {
          "path": "./backup_js/create.service.js",
          "size": 11096,
          "lines": 377,
          "hash": "84da86ecd1cda24800cfb74d5491f763",
          "functions": [
            "export async function loadDecksForCreation",
            "} catch",
            "export function openCreateDeckModal",
            "export async function createDeck",
            "const newDeck = stateManager.addDeck",
            "[nameInput, descriptionInput].forEach",
            "} catch",
            "export async function loadDecksForCreation",
            "} catch",
            "export async function createFlashcard",
            "const newFlashcard = stateManager.addFlashcard",
            "} catch",
            "export async function createBulkFlashcards",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export async function importFlashcards",
            "fetch",
            "} catch",
            "export function initializeCreateEvents",
            "createDeckBtn.addEventListener",
            "importBtn.addEventListener"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import stateManager from './state-manager.js';",
            "import storageService from './storage.service.js';",
            "import { validateDeckData, validateFlashcardData } from './utils/validation.js';",
            "import {",
            "import {",
            "import {",
            "import { FlashcardFormUtils, DeckFormUtils } from './utils/formValidation.js';",
            "import { FlashcardNotifications, DeckNotifications } from './utils/notifications.js';"
          ],
          "exports": [
            "export async function loadDecksForCreation() {",
            "export function openCreateDeckModal() {",
            "export async function createDeck(deckData = {}) {",
            "export async function loadDecksForCreation() {",
            "export async function createFlashcard() {",
            "export async function createBulkFlashcards(flashcardsData, deckId) {",
            "export async function importFlashcards(file, deckId) {",
            "export function initializeCreateEvents() {"
          ]
        },
        {
          "path": "./backup_js/manage.service.js",
          "size": 12342,
          "lines": 432,
          "hash": "1eec0ac603f5a61ac5412d17a0e61a52",
          "functions": [
            "export async function loadManageDecks",
            "} catch",
            "} catch",
            "renderManageDecks",
            "export async function deleteDeck",
            "} catch",
            "export async function editDeck",
            "} catch",
            "showEditDeckForm",
            "createEditDeckModal",
            "export async function updateDeck",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export function closeEditDeckModal",
            "export async function loadDeckFlashcards",
            "} catch",
            "renderDeckFlashcards",
            "export async function exportDeck",
            "const blob = new Blob",
            "} catch",
            "export async function loadManageData"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { validateDeckData } from './utils/validation.js';",
            "import {",
            "import {"
          ],
          "exports": [
            "export async function loadManageDecks() {",
            "export async function deleteDeck(id) {",
            "export async function editDeck(deckId) {",
            "export async function updateDeck(deckId) {",
            "export function closeEditDeckModal() {",
            "export async function loadDeckFlashcards(deckId) {",
            "export async function exportDeck(deckId) {",
            "export async function loadManageData() {"
          ]
        },
        {
          "path": "./backup_js/storage.service.js",
          "size": 21702,
          "lines": 811,
          "hash": "8404b8cec9c1f840150fbcc5f1503676",
          "functions": [
            "constructor",
            "checkStorageAvailability",
            "} catch",
            "initializeStorage",
            "migrateStorage",
            "} catch",
            "cleanExpiredData",
            "keysToRemove.forEach",
            "save",
            "} catch",
            "load",
            "} catch",
            "remove",
            "} catch",
            "freeUpSpace",
            "getDecks",
            "getDeck",
            "deck",
            "createDeck",
            "this.addToPendingSync",
            "updateDeck",
            "deckIndex",
            "deleteDeck",
            "deckIndex",
            "getFlashcards",
            "getFlashcardsByDeck",
            "createFlashcard",
            "this.addToPendingSync",
            "updateFlashcard",
            "cardIndex",
            "deleteFlashcard",
            "cardIndex",
            "deleteFlashcardsByDeck",
            "filteredCards",
            "updateDeckCardCount",
            "exportAllData",
            "importData",
            "} catch",
            "clearAllData",
            "} catch",
            "getStorageInfo",
            "addToPendingSync",
            "exists",
            "} catch",
            "getPendingSync",
            "removeFromPendingSync",
            "filteredItems",
            "} catch",
            "clearPendingSync",
            "} catch",
            "getPendingSyncStats"
          ],
          "imports": [
            "import { validateDeckData, validateFlashcardData } from './utils/validation.js';",
            "import { showNotification, generateId } from './utils/helpers.js';"
          ],
          "exports": [
            "export const {",
            "export default storageService;"
          ]
        }
      ],
      "main_files": [],
      "total_files": 3
    },
    {
      "group_id": 3,
      "priority": "MEDIA - Múltiples archivos en backup",
      "backup_files": [
        {
          "path": "./backup_js/dashboard.service.js",
          "size": 10499,
          "lines": 388,
          "hash": "cb769d2ea563dfbfa7abbeb4c675435d",
          "functions": [
            "export async function loadDashboardData",
            "} catch",
            "export async function loadUserStats",
            "} catch",
            "export async function loadUserDecks",
            "} catch",
            "export async function loadWeeklyStats",
            "const weeklyStats = await apiWithFallback",
            "} catch",
            "updateDashboardStats",
            "Object.entries",
            "updateAdditionalStats",
            "updateDashboardDecks",
            "initializeChartsWithData",
            "} catch",
            "async function loadAndUpdateActivityHeatmap",
            "} catch",
            "generateMockActivityData",
            "data.push",
            "export async function updateDashboardPeriod",
            "} catch",
            "export async function refreshDashboard",
            "} catch"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import stateManager from './state-manager.js';",
            "import {",
            "import {",
            "import {",
            "import {"
          ],
          "exports": [
            "export async function loadDashboardData() {",
            "export async function loadUserStats() {",
            "export async function loadUserDecks() {",
            "export async function loadWeeklyStats() {",
            "export async function updateDashboardPeriod(period) {",
            "export async function refreshDashboard() {"
          ]
        },
        {
          "path": "./backup_js/flashcards.service.js",
          "size": 6578,
          "lines": 252,
          "hash": "2efdb51d5b9878fd33f4c6313b2d3b17",
          "functions": [
            "export async function createFlashcard",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export async function editFlashcard",
            "} catch",
            "export async function updateFlashcard",
            "api",
            "body: JSON.stringify",
            "} catch",
            "export async function deleteFlashcard",
            "api",
            "} catch",
            "export async function loadFlashcardsByDeck",
            "} catch",
            "export async function loadAllFlashcards",
            "} catch",
            "resetEditMode",
            "export function cancelEdit",
            "export function getEditingFlashcardId"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import { validateFlashcardData } from './utils/validation.js';",
            "import {",
            "import {",
            "import { FlashcardFormUtils } from './utils/formValidation.js';",
            "import { FlashcardNotifications } from './utils/notifications.js';"
          ],
          "exports": [
            "export async function createFlashcard() {",
            "export async function editFlashcard(flashcardId) {",
            "export async function updateFlashcard() {",
            "export async function deleteFlashcard(flashcardId) {",
            "export async function loadFlashcardsByDeck(deckId) {",
            "export async function loadAllFlashcards() {",
            "export function cancelEdit() {",
            "export function getEditingFlashcardId() {"
          ]
        }
      ],
      "main_files": [],
      "total_files": 2
    },
    {
      "group_id": 4,
      "priority": "MEDIA - Múltiples archivos en backup",
      "backup_files": [
        {
          "path": "./backup_js/eslint.config.js",
          "size": 3646,
          "lines": 155,
          "hash": "05e72f5b69bcf66d846e7a8dc7f79f9e",
          "functions": [],
          "imports": [
            "import js from '@eslint/js';",
            "import globals from 'globals';",
            "import cypress from 'eslint-plugin-cypress';"
          ],
          "exports": [
            "export default ["
          ]
        },
        {
          "path": "./backup_js/vitest.config.js",
          "size": 774,
          "lines": 34,
          "hash": "6c804dd2bb06d7b3c2430f1ff348aeb3",
          "functions": [
            "export default defineConfig"
          ],
          "imports": [
            "import { defineConfig } from 'vitest/config';"
          ],
          "exports": [
            "export default defineConfig({"
          ]
        }
      ],
      "main_files": [],
      "total_files": 2
    },
    {
      "group_id": 5,
      "priority": "ALTA - Posibles duplicados entre backup y principal",
      "backup_files": [
        {
          "path": "./backup_js/gamification.service.js",
          "size": 16970,
          "lines": 661,
          "hash": "57516646c59ac092a46d68331dc1481d",
          "functions": [
            "export async function loadGamificationData",
            "const data = await apiWithFallback",
            "} catch",
            "export function calculatePoints",
            "switch",
            "export function startStudySession",
            "export async function endStudySession",
            "updateStreak",
            "} else if",
            "updateLevel",
            "async function checkAchievements",
            "async function grantAchievement",
            "async function saveGamificationData",
            "api",
            "} catch",
            "updateGamificationUI",
            "updatePointsDisplay",
            "setTimeout",
            "updateLevelProgress",
            "updateAchievementsDisplay",
            ".map",
            "showSessionSummary",
            "triggerLevelUpEffect",
            "setTimeout",
            "triggerAchievementEffect",
            "setTimeout",
            "export function getGamificationStats"
          ],
          "imports": [
            "import { api } from './apiClient.js';",
            "import { store } from './store/store.js';",
            "import {",
            "import { showNotification } from './utils/helpers.js';"
          ],
          "exports": [
            "export async function loadGamificationData() {",
            "export function calculatePoints(difficulty, card, responseTime = 0) {",
            "export function startStudySession() {",
            "export async function endStudySession() {",
            "export function getGamificationStats() {"
          ]
        }
      ],
      "main_files": [
        {
          "path": "./services/NavigationService.js",
          "size": 5297,
          "lines": 201,
          "hash": "e880e396db3e70bbbd311d1b66640827",
          "functions": [
            "constructor",
            "init",
            "waitForNavigationSystem",
            "checkNavigation",
            "navigateTo",
            "} catch",
            "processPendingNavigations",
            "while",
            "getCurrentSection",
            "goBack",
            "clearHistory",
            "on",
            "off",
            "emit",
            "this.listeners.get",
            "} catch",
            "isReady",
            "getStats",
            "export navigateTo",
            "export getCurrentSection",
            "export goBack",
            "export onNavigationChange",
            "export onNavigationReady"
          ],
          "imports": [],
          "exports": [
            "export const navigateTo = (sectionId, options) => navigationService.navigateTo(sectionId, options);",
            "export const getCurrentSection = () => navigationService.getCurrentSection();",
            "export const goBack = () => navigationService.goBack();",
            "export const onNavigationChange = (callback) => navigationService.on('navigationChanged', callback);",
            "export const onNavigationReady = (callback) => navigationService.on('navigationReady', callback);",
            "export default navigationService;"
          ]
        }
      ],
      "total_files": 2
    },
    {
      "group_id": 6,
      "priority": "ALTA - Posibles duplicados entre backup y principal",
      "backup_files": [
        {
          "path": "./backup_js/helpers.js",
          "size": 8685,
          "lines": 353,
          "hash": "3469817c744e8887622ce0bc60167717",
          "functions": [
            "initializeParticles",
            "} catch",
            "autoInitParticles",
            "showSection",
            "document.querySelectorAll",
            "handleGlobalError",
            "async function checkConnectivity",
            "const response = await fetch",
            "getDeviceInfo",
            "tryInitParticles",
            "window.addEventListener",
            "window.addEventListener",
            "window.addEventListener",
            "window.addEventListener"
          ],
          "imports": [
            "import {",
            "import {",
            "import {"
          ],
          "exports": [
            "export {",
            "export {"
          ]
        }
      ],
      "main_files": [
        {
          "path": "./utils/apiHelpers.js",
          "size": 4524,
          "lines": 181,
          "hash": "6c147ad3ede1a6bad49bd65086c63946",
          "functions": [
            "export async function multipleApiWithFallback",
            "} catch",
            "} catch",
            "} catch"
          ],
          "imports": [
            "import { api } from '../apiClient.js';",
            "import { showNotification } from './helpers.js';"
          ],
          "exports": [
            "export async function apiWithFallback(",
            "export async function multipleApiWithFallback(apiCalls) {",
            "export async function performCrudOperation(",
            "export async function loadDataWithRetry(",
            "export const FALLBACK_DATA = {"
          ]
        },
        {
          "path": "./utils/helpers.js",
          "size": 15878,
          "lines": 580,
          "hash": "2a51aed70df321d4355fdbab86b49e1f",
          "functions": [
            "export function debounce",
            "return function executedFunction",
            "later",
            "switch",
            "setTimeout",
            "setTimeout",
            "setTimeout",
            "export function formatDate",
            "return dateObj.toLocaleDateString",
            "export function formatRelativeDate",
            "export function capitalize",
            "export function capitalizeFirst",
            "export function truncateText",
            "export function generateId",
            "export async function copyToClipboard",
            "} catch",
            "export function getVisibleElement",
            "export function clearForm",
            "inputs.forEach",
            "export function renderEmptyState",
            "} else if",
            "export function renderEmptyDecksState",
            "export function renderEmptyFlashcardsState",
            "export function renderEmptyStatsState",
            "export function downloadFile",
            "} catch",
            "export function capitalizeWords",
            "export function sanitizeFilename",
            "export function parseCSV",
            "export function formatFileSize",
            "export function isValidEmail",
            "export function isValidPassword"
          ],
          "imports": [],
          "exports": [
            "export function debounce(func, wait) {",
            "export function showNotification(",
            "export function formatDate(date, locale = 'es-ES') {",
            "export function formatRelativeDate(date) {",
            "export function capitalize(str) {",
            "export function capitalizeFirst(str) {",
            "export function truncateText(text, maxLength, suffix = '...') {",
            "export function generateId() {",
            "export async function copyToClipboard(text) {",
            "export function getVisibleElement(selector) {",
            "export function clearForm(formSelector) {",
            "export function renderEmptyState(container, options = {}) {",
            "export function renderEmptyDecksState(container, options = {}) {",
            "export function renderEmptyFlashcardsState(container, options = {}) {",
            "export function renderEmptySearchState(",
            "export function renderEmptyStatsState(container, options = {}) {",
            "export function downloadFile(content, filename, mimeType = 'text/plain') {",
            "export function capitalizeWords(str) {",
            "export function sanitizeFilename(filename) {",
            "export function parseCSV(csvContent, delimiter = ',') {",
            "export function formatFileSize(bytes) {",
            "export function isValidEmail(email) {",
            "export function isValidPassword(password) {"
          ]
        }
      ],
      "total_files": 3
    },
    {
      "group_id": 7,
      "priority": "ALTA - Posibles duplicados entre backup y principal",
      "backup_files": [
        {
          "path": "./backup_js/store.js",
          "size": 17611,
          "lines": 772,
          "hash": "a55767334baad711411de654ebabca21",
          "functions": [
            "constructor",
            "getState",
            "setState",
            "} catch",
            "subscribe",
            "return",
            "notifySubscribers",
            "this.subscribers.forEach",
            "} catch",
            "setUser",
            "logout",
            "setDecks",
            "addDeck",
            "updateDeck",
            "deleteDeck",
            "decks",
            "setCurrentDeck",
            "startStudySession",
            "updateStudyProgress",
            "endStudySession",
            "updateSettings",
            "setLoading",
            "setCurrentSection",
            "addError",
            "removeError",
            "addNotification",
            "validateStateUpdate",
            "matchesFilter",
            "deepMerge",
            "addToHistory",
            "this.history.push",
            "saveToLocalStorage",
            "} catch",
            "loadFromLocalStorage",
            "} catch",
            "clearLocalStorage",
            "} catch",
            "setupAutoSave",
            "setInterval",
            "setupConnectivityMonitoring",
            "window.addEventListener",
            "window.addEventListener",
            "log",
            "error",
            "getDebugInfo",
            "export function createSimpleStore",
            "getState",
            "setState",
            "subscribe",
            "return"
          ],
          "imports": [
            "import { generateId } from './utils/helpers.js';",
            "import { validateRequiredFields } from './utils/validation.js';"
          ],
          "exports": [
            "export function createSimpleStore() {",
            "export { store };",
            "export default store;",
            "export { StudyingFlashStore };",
            "export const simpleStore = createSimpleStore();"
          ]
        }
      ],
      "main_files": [
        {
          "path": "./store/store.js",
          "size": 2746,
          "lines": 123,
          "hash": "e051fd153b01e5f8eabdc5d2813c0398",
          "functions": [
            "constructor",
            "this.store.subscribe",
            "getState",
            "setState",
            "subscribe",
            "return",
            "notifyListeners",
            "this.listeners.forEach",
            "} catch",
            "setUser",
            "setDecks",
            "addDeck",
            "updateDeck",
            "deleteDeck"
          ],
          "imports": [
            "import store, { StudyingFlashStore, simpleStore } from '../store.js';",
            "import store from './store.js'"
          ],
          "exports": [
            "export default legacyStore;",
            "export { legacyStore as store };",
            "export { store as mainStore, StudyingFlashStore, simpleStore };"
          ]
        }
      ],
      "total_files": 2
    },
    {
      "group_id": 8,
      "priority": "BAJA - Archivos relacionados pero no duplicados",
      "backup_files": [],
      "main_files": [
        {
          "path": "./utils/formValidation.js",
          "size": 7006,
          "lines": 235,
          "hash": "8aa4d3170e98da670e065b502bbbfcba",
          "functions": [
            "static validateRequiredFields",
            "static validateFlashcardForm",
            "static validateDeckForm",
            "static getFormData",
            "static getFieldData",
            "static clearForm",
            "static clearFields",
            "selectors.forEach",
            "static getCreateFormData",
            "return FormValidator.getFieldData",
            "static clearCreateForm",
            "static validateAndGetData",
            "static getCreateFormData",
            "return FormValidator.getFieldData",
            "static clearCreateForm",
            "static validateAndGetData"
          ],
          "imports": [],
          "exports": [
            "if (typeof module !== 'undefined' && module.exports) {",
            "module.exports = {"
          ]
        },
        {
          "path": "./utils/validation.js",
          "size": 3664,
          "lines": 144,
          "hash": "d62f6064b734f0fcf9a75870208ce4bc",
          "functions": [
            "emptyFields",
            "export function validateLoginCredentials",
            "export function validateFlashcardData",
            "export function validateDeckData",
            "export function validateEmail",
            "export function validatePassword",
            "export function validateRegistrationData"
          ],
          "imports": [
            "import { showNotification } from './helpers.js';"
          ],
          "exports": [
            "export function validateRequiredFields(",
            "export function validateLoginCredentials(email, password) {",
            "export function validateFlashcardData(deckId, front, back) {",
            "export function validateDeckData(name) {",
            "export function validateEmail(email) {",
            "export function validatePassword(password) {",
            "export function validateRegistrationData(email, password, confirmPassword) {"
          ]
        }
      ],
      "total_files": 2
    }
  ],
  "agent_distribution": {
    "agent_1": {
      "name": "Agente Coordinador Principal",
      "responsibility": "Coordinación general y archivo principal",
      "tasks": [
        "Analizar ./flashcard-app-final.js como archivo de referencia",
        "Coordinar con otros agentes usando sistema de locks",
        "Verificar integridad final del proyecto",
        "Ejecutar merge final de cambios"
      ],
      "files_to_analyze": [
        "./flashcard-app-final.js"
      ],
      "priority": "CRÍTICA"
    },
    "agent_2": {
      "name": "Agente de Servicios Core",
      "responsibility": "Servicios principales y autenticación",
      "tasks": [
        "Analizar servicios de autenticación duplicados",
        "Comparar auth.service.js con implementación principal",
        "Identificar funciones duplicadas en servicios core",
        "Proponer eliminación de duplicados"
      ],
      "files_to_analyze": [
        "./backup_js/auth.service.js",
        "./backup_js/apiClient.js",
        "./services/"
      ],
      "priority": "ALTA"
    },
    "agent_3": {
      "name": "Agente de Gestión de Datos",
      "responsibility": "Servicios de datos y almacenamiento",
      "tasks": [
        "Analizar storage.service.js y duplicados",
        "Comparar servicios de gestión de datos",
        "Identificar funciones de CRUD duplicadas",
        "Optimizar servicios de almacenamiento"
      ],
      "files_to_analyze": [
        "./backup_js/storage.service.js",
        "./backup_js/manage.service.js",
        "./backup_js/create.service.js",
        "./store/"
      ],
      "priority": "ALTA"
    },
    "agent_4": {
      "name": "Agente de UI y Dashboard",
      "responsibility": "Interfaz de usuario y dashboard",
      "tasks": [
        "Analizar dashboard.service.js y similares",
        "Comparar servicios de interfaz de usuario",
        "Identificar componentes UI duplicados",
        "Optimizar servicios de presentación"
      ],
      "files_to_analyze": [
        "./backup_js/dashboard.service.js",
        "./backup_js/study.service.js",
        "./backup_js/gamification.service.js",
        "./utils/"
      ],
      "priority": "MEDIA"
    },
    "agent_5": {
      "name": "Agente de Utilidades y Testing",
      "responsibility": "Utilidades, helpers y archivos de testing",
      "tasks": [
        "Analizar archivos de utilidades duplicados",
        "Comparar helpers y funciones auxiliares",
        "Revisar archivos de configuración duplicados",
        "Limpiar archivos de testing obsoletos"
      ],
      "files_to_analyze": [
        "./backup_js/helpers.js",
        "./backup_js/router.js",
        "./backup_js/main.js",
        "./tests/",
        "./cypress/"
      ],
      "priority": "BAJA"
    }
  },
  "coordination_protocol": {
    "coordination_rules": [
      "🔒 Usar sistema de locks antes de modificar archivos",
      "📝 Documentar todos los cambios en commits descriptivos",
      "🔄 Sincronizar con repositorio remoto frecuentemente",
      "✅ Validar cambios antes de hacer push",
      "🤝 Comunicar conflictos potenciales inmediatamente"
    ],
    "workflow_sequence": [
      "1. Agente 1 inicia coordinación y adquiere lock general",
      "2. Agentes 2-5 trabajan en paralelo en sus áreas asignadas",
      "3. Cada agente adquiere lock específico para sus archivos",
      "4. Agente 1 coordina merge de cambios",
      "5. Verificación final y push coordinado"
    ],
    "conflict_prevention": [
      "Cada agente trabaja en archivos específicos sin solapamiento",
      "Uso obligatorio de branches temporales por agente",
      "Merge automático inteligente con resolución de conflictos",
      "Rollback automático en caso de errores"
    ],
    "communication_protocol": [
      "Usar commits con prefijos: [AGENT-X] descripción",
      "Reportar progreso cada 15 minutos",
      "Notificar inmediatamente cualquier conflicto",
      "Coordinar a través del Agente 1 para decisiones críticas"
    ]
  },
  "summary": {
    "total_js_files": 42,
    "similar_name_groups": 8,
    "agents_assigned": 5,
    "coordination_method": "Lock-based with automatic merge"
  }
}