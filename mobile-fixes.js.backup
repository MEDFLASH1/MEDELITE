// ===== MOBILE FIXES DISABLED =====
// This file conflicts with app-functional.js according to AGENTS.md guidelines
// Only app-functional.js should contain application logic
//
// CONFLICT DETECTED: 
// - This file overwrites window.showSection function
// - Duplicates mobile device detection from app-functional.js
// - Auto-executes initialization that may conflict
//
// To reactivate: Remove these comments and review integration with app-functional.js

/*
 * ORIGINAL CODE BELOW WAS COMMENTED TO PREVENT CONFLICTS
 * ======================================================
 * 
 * MOBILE FIXES - Correcciones espec√≠ficas para dispositivos m√≥viles
 * ================================================================
 * 
 * Este archivo contiene correcciones espec√≠ficas para mejorar la funcionalidad
 * en dispositivos m√≥viles y tablets, especialmente para el bot√≥n de estudiar.
 */

// ORIGINAL CODE COMMENTED TO PREVENT CONFLICTS
// The functionality below conflicts with app-functional.js
// according to AGENTS.md guidelines that specify only app-functional.js 
// should be modified for application logic.

console.log('üì± Mobile Fixes: DISABLED due to conflicts with app-functional.js');
console.log('‚ÑπÔ∏è See AGENTS.md - Only app-functional.js should contain application logic');

/*
// ORIGINAL MOBILE DETECTION CODE (COMMENTED TO PREVENT CONFLICT)
// Detectar si es un dispositivo m√≥vil
const isMobileDevice = () => {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           ('ontouchstart' in window) ||
           (navigator.maxTouchPoints > 0);
};

// Mejorar event listeners para dispositivos m√≥viles
const enhanceMobileEventListeners = () => {
    console.log('üîß Aplicando correcciones m√≥viles...');
    
    // Funci√≥n para agregar eventos tanto de click como touch
    const addMobileEvents = (element, handler) => {
        if (!element) return;
        
        // Remover eventos existentes para evitar duplicados
        element.removeEventListener('click', handler);
        element.removeEventListener('touchstart', handler);
        element.removeEventListener('touchend', handler);
        
        // Agregar eventos optimizados para m√≥vil
        if (isMobileDevice()) {
            // Para dispositivos m√≥viles, usar touchstart para respuesta m√°s r√°pida
            element.addEventListener('touchstart', (e) => {
                e.preventDefault(); // Prevenir el click fantasma
                handler(e);
            }, { passive: false });
            
            // Fallback para click
            element.addEventListener('click', handler);
        } else {
            // Para desktop, usar solo click
            element.addEventListener('click', handler);
        }
    };
    
    // Mejorar navegaci√≥n principal
    const navLinks = document.querySelectorAll('[data-section]');
    navLinks.forEach(link => {
        addMobileEvents(link, (e) => {
            e.preventDefault();
            const section = e.target.dataset.section || e.currentTarget.dataset.section;
            if (section && window.showSection) {
                console.log(`üì± Navegando a: ${section}`);
                window.showSection(section);
            }
        });
    });
    
    // Mejorar botones de estudio espec√≠ficamente
    const studyButtons = document.querySelectorAll('.btn-study, [onclick*="startStudy"]');
    studyButtons.forEach(button => {
        addMobileEvents(button, (e) => {
            e.preventDefault();
            const deckId = button.getAttribute('onclick')?.match(/startStudy\('([^']+)'\)/)?.[1];
            if (deckId && window.StudyingFlash) {
                console.log(`üì± Iniciando estudio del deck: ${deckId}`);
                window.StudyingFlash.startStudy(deckId);
            }
        });
    });
    
    // Mejorar botones de dificultad en estudio
    const difficultyButtons = document.querySelectorAll('.difficulty-btn');
    difficultyButtons.forEach(button => {
        addMobileEvents(button, (e) => {
            e.preventDefault();
            const quality = parseInt(e.currentTarget.dataset.quality);
            if (!isNaN(quality) && window.StudyingFlash) {
                console.log(`üì± Respuesta de calidad: ${quality}`);
                window.StudyingFlash.processStudyAnswer(quality);
            }
        });
    });
    
    // Mejorar volteo de flashcards
    const flashcardElement = document.getElementById('flashcard');
    if (flashcardElement) {
        addMobileEvents(flashcardElement, (e) => {
            e.preventDefault();
            if (window.StudyingFlash && window.StudyingFlash.flipCard) {
                console.log('üì± Volteando flashcard');
                window.StudyingFlash.flipCard();
            }
        });
    }
    
    console.log('‚úÖ Correcciones m√≥viles aplicadas');
};

// Mejorar la funci√≥n showSection para m√≥viles
const enhanceShowSectionForMobile = () => {
    const originalShowSection = window.showSection;
    
    window.showSection = function(sectionName) {
        console.log(`üì± showSection mejorado llamado para: ${sectionName}`);
        
        // Llamar a la funci√≥n original
        if (originalShowSection) {
            const result = originalShowSection(sectionName);
            
            // Aplicar correcciones espec√≠ficas despu√©s de cambiar secci√≥n
            setTimeout(() => {
                enhanceMobileEventListeners();
                
                // Scroll suave al inicio de la secci√≥n en m√≥viles
                if (isMobileDevice()) {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            }, 100);
            
            return result;
        }
    };
};

// Agregar estilos CSS espec√≠ficos para m√≥vil
const addMobileStyles = () => {
    const mobileStyles = document.createElement('style');
    mobileStyles.id = 'mobile-fixes-styles';
    mobileStyles.textContent = `
        /* Mejoras t√°ctiles para m√≥viles */
        @media (max-width: 768px) {
            /* Mejorar √°rea t√°ctil de botones */
            .nav-link, .btn, button, [data-section] {
                min-height: 44px !important;
                min-width: 44px !important;
                padding: 12px 16px !important;
                touch-action: manipulation;
                -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);
            }
            
            /* Mejorar bot√≥n de estudiar espec√≠ficamente */
            .btn-study, [onclick*="startStudy"] {
                background: #2563eb !important;
                color: white !important;
                border: none !important;
                border-radius: 8px !important;
                font-weight: 600 !important;
                font-size: 16px !important;
                min-height: 48px !important;
                cursor: pointer !important;
                transition: all 0.2s ease !important;
            }
            
            .btn-study:active, [onclick*="startStudy"]:active {
                background: #1d4ed8 !important;
                transform: scale(0.98) !important;
            }
            
            /* Mejorar flashcard para t√°ctil */
            #flashcard {
                cursor: pointer !important;
                touch-action: manipulation !important;
                -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1) !important;
            }
            
            /* Mejorar botones de dificultad */
            .difficulty-btn {
                min-height: 48px !important;
                min-width: 80px !important;
                touch-action: manipulation !important;
                -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1) !important;
            }
            
            /* Prevenir zoom en inputs */
            input, select, textarea {
                font-size: 16px !important;
            }
            
            /* Mejorar navegaci√≥n m√≥vil */
            .nav-container {
                position: sticky !important;
                top: 0 !important;
                z-index: 1000 !important;
                background: var(--bg-color, #ffffff) !important;
                border-bottom: 1px solid var(--border-color, #e5e7eb) !important;
            }
        }
        
        /* Animaciones suaves para feedback t√°ctil */
        .nav-link:active, .btn:active, button:active, [data-section]:active {
            transform: scale(0.98);
            transition: transform 0.1s ease;
        }
    `;
    
    // Remover estilos existentes si los hay
    const existingStyles = document.getElementById('mobile-fixes-styles');
    if (existingStyles) {
        existingStyles.remove();
    }
    
    document.head.appendChild(mobileStyles);
    console.log('üì± Estilos m√≥viles aplicados');
};

// Funci√≥n principal de inicializaci√≥n
const initMobileFixes = () => {
    console.log('üì± Inicializando correcciones m√≥viles...');
    console.log('üì± Dispositivo m√≥vil detectado:', isMobileDevice());
    
    // Aplicar correcciones
    addMobileStyles();
    enhanceShowSectionForMobile();
    enhanceMobileEventListeners();
    
    // Re-aplicar correcciones cuando el DOM cambie
    const observer = new MutationObserver((mutations) => {
        let shouldReapply = false;
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                shouldReapply = true;
            }
        });
        
        if (shouldReapply) {
            setTimeout(enhanceMobileEventListeners, 100);
        }
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    console.log('‚úÖ Correcciones m√≥viles inicializadas');
};

// Auto-inicializar cuando el DOM est√© listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMobileFixes);
} else {
    initMobileFixes();
}

// Re-inicializar cuando la aplicaci√≥n principal est√© lista
window.addEventListener('load', () => {
    setTimeout(initMobileFixes, 500);
});

// Exponer funciones globalmente para debugging
window.MobileFixes = {
    init: initMobileFixes,
    enhance: enhanceMobileEventListeners,
    isMobile: isMobileDevice
};

console.log('üì± Mobile Fixes: DISABLED - See comments at top of file');
*/

